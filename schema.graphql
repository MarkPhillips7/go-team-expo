# source: https://api.graph.cool/simple/v1/cjpeel49p81sr0135wsewoo11
# timestamp: Mon Aug 12 2019 21:30:25 GMT-0400 (EDT)

enum _ModelMutationType {
  CREATED
  UPDATED
  DELETED
}

"""Meta information about the query."""
type _QueryMeta {
  count: Int!
}

type AddToChildrenParentsGuardiansPayload {
  childrenUser: User
  parentsGuardiansUser: User
}

type AddToFormationOnFormationSubstitutionPayload {
  formationSubstitutionFormationSubstitution: FormationSubstitution
  formationFormation: Formation
}

type AddToFormationsPositionsPayload {
  formationsFormation: Formation
  positionsPosition: Position
}

type AddToGameDefinitionOnLeaguePayload {
  gameDefinitionGameDefinition: GameDefinition
  leaguesLeague: League
}

type AddToGameDefinitionsGamePeriodsPayload {
  gamePeriodsGamePeriod: GamePeriod
  gameDefinitionsGameDefinition: GameDefinition
}

type AddToGameOnGameActivityPayload {
  gameActivitiesGameActivity: GameActivity
  gameGame: Game
}

type AddToGameOnGameTeamSeasonPayload {
  gameGame: Game
  gameTeamSeasonsGameTeamSeason: GameTeamSeason
}

type AddToGamePeriodOnGameActivityPayload {
  gamePeriodGamePeriod: GamePeriod
  gameActivitiesGameActivity: GameActivity
}

type AddToGamePlanOnGameTeamSeasonPayload {
  gamePlanGamePlan: GamePlan
  gameTeamSeasonsGameTeamSeason: GameTeamSeason
}

type AddToGameTeamSeasonOnFormationSubstitutionPayload {
  formationSubstitutionsFormationSubstitution: FormationSubstitution
  gameTeamSeasonGameTeamSeason: GameTeamSeason
}

type AddToGameTeamSeasonOnGamePlayerPayload {
  gameTeamSeasonGameTeamSeason: GameTeamSeason
  gamePlayersGamePlayer: GamePlayer
}

type AddToGameTeamSeasonOnSubstitutionPayload {
  substitutionsSubstitution: Substitution
  gameTeamSeasonGameTeamSeason: GameTeamSeason
}

type AddToLeagueOnLeagueSeasonPayload {
  leagueLeague: League
  leagueSeasonsLeagueSeason: LeagueSeason
}

type AddToLeagueOnTeamPayload {
  leagueLeague: League
  teamsTeam: Team
}

type AddToLeagueSeasonOnTeamSeasonPayload {
  leagueSeasonLeagueSeason: LeagueSeason
  teamSeasonsTeamSeason: TeamSeason
}

type AddToLeaguesSeasonsPayload {
  leaguesLeague: League
  seasonsSeason: Season
}

type AddToOrganizationOnLeaguePayload {
  organizationOrganization: Organization
  leaguesLeague: League
}

type AddToPlayerOnGamePlayersPayload {
  playerUser: User
  gamePlayersGamePlayer: GamePlayer
}

type AddToPlayerOnPlayerPositionPayload {
  playerUser: User
  playerPositionsPlayerPosition: PlayerPosition
}

type AddToPlayerOnPositionCategoryPreferencePayload {
  playerUser: User
  positionCategoryPreferencesAsPlayerPositionCategoryPreference: PositionCategoryPreference
}

type AddToPlayerPositionOnPlayerPositionAssignmentPayload {
  playerPositionPlayerPosition: PlayerPosition
  playerPositionAssignmentsPlayerPositionAssignment: PlayerPositionAssignment
}

type AddToPositionCategoryOnPositionCategoryPreferencePayload {
  positionCategoryPositionCategory: PositionCategory
  positionCategoryPreferencesPositionCategoryPreference: PositionCategoryPreference
}

type AddToPositionCategoryOnPositionPayload {
  positionCategoryPositionCategory: PositionCategory
  positionsPosition: Position
}

type AddToPositionOnPlayerPositionPayload {
  positionPosition: Position
  playerPositionsPlayerPosition: PlayerPosition
}

type AddToPrefererOnPositionCategoryPreferencePayload {
  prefererUser: User
  positionCategoryPreferencesAsPrefererPositionCategoryPreference: PositionCategoryPreference
}

type AddToSeasonOnLeagueSeasonPayload {
  seasonSeason: Season
  leagueSeasonsLeagueSeason: LeagueSeason
}

type AddToSportOnLeaguePayload {
  sportSport: Sport
  leaguesLeague: League
}

type AddToSportsOrganizationsPayload {
  sportsSport: Sport
  organizationsOrganization: Organization
}

type AddToSubstitutionsPlayerPositionAssignmentsPayload {
  substitutionsSubstitution: Substitution
  playerPositionAssignmentsPlayerPositionAssignment: PlayerPositionAssignment
}

type AddToTeamOnTeamSeasonPayload {
  teamTeam: Team
  teamSeasonsTeamSeason: TeamSeason
}

type AddToTeamSeasonOnGameTeamSeasonPayload {
  teamSeasonTeamSeason: TeamSeason
  gameTeamSeasonsGameTeamSeason: GameTeamSeason
}

type AddToTeamSeasonsCoachesPayload {
  coachesUser: User
  teamSeasonsAsCoachTeamSeason: TeamSeason
}

type AddToTeamSeasonsParentsPayload {
  parentsUser: User
  teamSeasonsAsParentsTeamSeason: TeamSeason
}

type AddToTeamSeasonsPlayersPayload {
  playersUser: User
  teamSeasonsAsPlayerTeamSeason: TeamSeason
}

type AddToTeamsFansPayload {
  fansUser: User
  teamsAsFanTeam: Team
}

type AddToUserPostsPayload {
  authorUser: User
  postsPost: Post
}

enum Availability {
  ACTIVE
  UNAVAILABLE
}

input CreateFormation {
  formationCode: String
  name: String!
  formationSubstitutionIds: [ID!]
  formationSubstitution: [FormationformationSubstitutionFormationSubstitution!]
  positionsIds: [ID!]
  positions: [FormationpositionsPosition!]
}

input CreateFormationSubstitution {
  gameActivityStatus: GameActivityStatus!
  gameActivityType: GameActivityType!
  gameSeconds: Int
  timestamp: DateTime
  totalSeconds: Int
  formationId: ID
  formation: FormationSubstitutionformationFormation
  gameTeamSeasonId: ID
  gameTeamSeason: FormationSubstitutiongameTeamSeasonGameTeamSeason
}

input CreateGame {
  gameStatus: GameStatus!
  location: String
  name: String!
  scheduledStartTime: DateTime
  gameActivitiesIds: [ID!]
  gameActivities: [GamegameActivitiesGameActivity!]
  gameTeamSeasonsIds: [ID!]
  gameTeamSeasons: [GamegameTeamSeasonsGameTeamSeason!]
}

input CreateGameActivity {
  gameActivityStatus: GameActivityStatus!
  gameActivityType: GameActivityType!
  gameSeconds: Int
  name: String
  timestamp: DateTime!
  totalSeconds: Int
  gameId: ID
  game: GameActivitygameGame
  gamePeriodId: ID
  gamePeriod: GameActivitygamePeriodGamePeriod
}

input CreateGameDefinition {
  betweenGamesSeconds: Int
  includeGoalies: Boolean
  maximumDurationSeconds: Int
  name: String!
  numberOfReferees: Int
  numberPlayersPerSide: Int
  numberSimultaneousGames: Int
  typicalDurationSeconds: Int
  gamePeriodsIds: [ID!]
  gamePeriods: [GameDefinitiongamePeriodsGamePeriod!]
  leaguesIds: [ID!]
  leagues: [GameDefinitionleaguesLeague!]
}

input CreateGamePeriod {
  durationSeconds: Int
  gamePeriodType: GamePeriodType!
  name: String!
  postDurationSeconds: Int
  gameActivitiesIds: [ID!]
  gameActivities: [GamePeriodgameActivitiesGameActivity!]
  gameDefinitionsIds: [ID!]
  gameDefinitions: [GamePeriodgameDefinitionsGameDefinition!]
}

input CreateGamePlan {
  minimumGameTimePercentage: Int
  secondsBetweenSubs: Int
  gameTeamSeasonsIds: [ID!]
  gameTeamSeasons: [GamePlangameTeamSeasonsGameTeamSeason!]
}

input CreateGamePlayer {
  availability: Availability!
  gameTeamSeasonId: ID
  gameTeamSeason: GamePlayergameTeamSeasonGameTeamSeason
  playerId: ID
  player: GamePlayerplayerUser
}

input CreateGameTeamSeason {
  isHomeTeam: Boolean
  name: String!
  gameId: ID
  game: GameTeamSeasongameGame
  gamePlanId: ID
  gamePlan: GameTeamSeasongamePlanGamePlan
  teamSeasonId: ID
  teamSeason: GameTeamSeasonteamSeasonTeamSeason
  formationSubstitutionsIds: [ID!]
  formationSubstitutions: [GameTeamSeasonformationSubstitutionsFormationSubstitution!]
  gamePlayersIds: [ID!]
  gamePlayers: [GameTeamSeasongamePlayersGamePlayer!]
  substitutionsIds: [ID!]
  substitutions: [GameTeamSeasonsubstitutionsSubstitution!]
}

input CreateLeague {
  name: String!
  tags: [String!]
  gameDefinitionId: ID
  gameDefinition: LeaguegameDefinitionGameDefinition
  organizationId: ID
  organization: LeagueorganizationOrganization
  sportId: ID
  sport: LeaguesportSport
  leagueSeasonsIds: [ID!]
  leagueSeasons: [LeagueleagueSeasonsLeagueSeason!]
  seasonsIds: [ID!]
  seasons: [LeagueseasonsSeason!]
  teamsIds: [ID!]
  teams: [LeagueteamsTeam!]
}

input CreateLeagueSeason {
  endDate: DateTime
  maximumBirthDate: DateTime
  minimumBirthDate: DateTime
  name: String!
  startDate: DateTime
  tags: [String!]
  leagueId: ID
  league: LeagueSeasonleagueLeague
  seasonId: ID
  season: LeagueSeasonseasonSeason
  teamSeasonsIds: [ID!]
  teamSeasons: [LeagueSeasonteamSeasonsTeamSeason!]
}

input CreateOrganization {
  location: String
  name: String!
  tags: [String!]
  leaguesIds: [ID!]
  leagues: [OrganizationleaguesLeague!]
  sportsIds: [ID!]
  sports: [OrganizationsportsSport!]
}

input CreatePlayerPosition {
  playerId: ID
  player: PlayerPositionplayerUser
  positionId: ID
  position: PlayerPositionpositionPosition
  playerPositionAssignmentsIds: [ID!]
  playerPositionAssignments: [PlayerPositionplayerPositionAssignmentsPlayerPositionAssignment!]
}

input CreatePlayerPositionAssignment {
  playerPositionAssignmentType: PlayerPositionAssignmentType
  timestamp: DateTime
  playerPositionId: ID
  playerPosition: PlayerPositionAssignmentplayerPositionPlayerPosition
  substitutionsIds: [ID!]
  substitutions: [PlayerPositionAssignmentsubstitutionsSubstitution!]
}

input CreatePosition {
  lateralLocation: LateralLocation
  leftToRightPercent: Float
  name: String!
  positionCategoryId: ID
  positionCategory: PositionpositionCategoryPositionCategory
  formationsIds: [ID!]
  formations: [PositionformationsFormation!]
  playerPositionsIds: [ID!]
  playerPositions: [PositionplayerPositionsPlayerPosition!]
}

input CreatePositionCategory {
  color: String
  name: String!
  parkLocation: ParkLocation
  pitchLocation: PitchLocation
  positionCategoryPreferencesIds: [ID!]
  positionCategoryPreferences: [PositionCategorypositionCategoryPreferencesPositionCategoryPreference!]
  positionsIds: [ID!]
  positions: [PositionCategorypositionsPosition!]
}

input CreatePositionCategoryPreference {
  playerId: ID
  player: PositionCategoryPreferenceplayerUser
  positionCategoryId: ID
  positionCategory: PositionCategoryPreferencepositionCategoryPositionCategory
  prefererId: ID
  preferer: PositionCategoryPreferenceprefererUser
}

input CreatePost {
  title: String!
  authorId: ID
  author: PostauthorUser
}

input CreateSeason {
  name: String!
  tags: [String!]
  timeOfYearSeason: TimeOfYearSeason
  year: Int
  leaguesIds: [ID!]
  leagues: [SeasonleaguesLeague!]
  leagueSeasonsIds: [ID!]
  leagueSeasons: [SeasonleagueSeasonsLeagueSeason!]
}

input CreateSport {
  name: String!
  tags: [String!]
  leaguesIds: [ID!]
  leagues: [SportleaguesLeague!]
  organizationsIds: [ID!]
  organizations: [SportorganizationsOrganization!]
}

input CreateSubstitution {
  gameActivityStatus: GameActivityStatus!
  gameActivityType: GameActivityType!
  gameSeconds: Int
  timestamp: DateTime
  totalSeconds: Int
  gameTeamSeasonId: ID
  gameTeamSeason: SubstitutiongameTeamSeasonGameTeamSeason
  playerPositionAssignmentsIds: [ID!]
  playerPositionAssignments: [SubstitutionplayerPositionAssignmentsPlayerPositionAssignment!]
}

input CreateTeam {
  name: String!
  tags: [String!]
  leagueId: ID
  league: TeamleagueLeague
  fansIds: [ID!]
  fans: [TeamfansUser!]
  teamSeasonsIds: [ID!]
  teamSeasons: [TeamteamSeasonsTeamSeason!]
}

input CreateTeamSeason {
  name: String!
  tags: [String!]
  leagueSeasonId: ID
  leagueSeason: TeamSeasonleagueSeasonLeagueSeason
  teamId: ID
  team: TeamSeasonteamTeam
  coachesIds: [ID!]
  coaches: [TeamSeasoncoachesUser!]
  gameTeamSeasonsIds: [ID!]
  gameTeamSeasons: [TeamSeasongameTeamSeasonsGameTeamSeason!]
  parentsIds: [ID!]
  parents: [TeamSeasonparentsUser!]
  playersIds: [ID!]
  players: [TeamSeasonplayersUser!]
}

input CreateUser {
  dateOfBirth: DateTime
  gender: Gender
  name: String
  childrenIds: [ID!]
  children: [UserchildrenUser!]
  gamePlayersIds: [ID!]
  gamePlayers: [UsergamePlayersGamePlayer!]
  parentsGuardiansIds: [ID!]
  parentsGuardians: [UserchildrenUser!]
  playerPositionsIds: [ID!]
  playerPositions: [UserplayerPositionsPlayerPosition!]
  positionCategoryPreferencesAsPlayerIds: [ID!]
  positionCategoryPreferencesAsPlayer: [UserpositionCategoryPreferencesAsPlayerPositionCategoryPreference!]
  positionCategoryPreferencesAsPrefererIds: [ID!]
  positionCategoryPreferencesAsPreferer: [UserpositionCategoryPreferencesAsPrefererPositionCategoryPreference!]
  postsIds: [ID!]
  posts: [UserpostsPost!]
  teamsAsFanIds: [ID!]
  teamsAsFan: [UserteamsAsFanTeam!]
  teamSeasonsAsCoachIds: [ID!]
  teamSeasonsAsCoach: [UserteamSeasonsAsCoachTeamSeason!]
  teamSeasonsAsParentsIds: [ID!]
  teamSeasonsAsParents: [UserteamSeasonsAsParentsTeamSeason!]
  teamSeasonsAsPlayerIds: [ID!]
  teamSeasonsAsPlayer: [UserteamSeasonsAsPlayerTeamSeason!]
}

scalar DateTime

type Formation implements Node {
  formationCode: String
  formationSubstitution(filter: FormationSubstitutionFilter, orderBy: FormationSubstitutionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [FormationSubstitution!]
  id: ID!
  name: String!
  positions(filter: PositionFilter, orderBy: PositionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Position!]

  """Meta information about the query."""
  _formationSubstitutionMeta(filter: FormationSubstitutionFilter, orderBy: FormationSubstitutionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  """Meta information about the query."""
  _positionsMeta(filter: PositionFilter, orderBy: PositionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

input FormationFilter {
  """Logical AND on all given filters."""
  AND: [FormationFilter!]

  """Logical OR on all given filters."""
  OR: [FormationFilter!]
  formationCode: String

  """All values that are not equal to given value."""
  formationCode_not: String

  """All values that are contained in given list."""
  formationCode_in: [String!]

  """All values that are not contained in given list."""
  formationCode_not_in: [String!]

  """All values less than the given value."""
  formationCode_lt: String

  """All values less than or equal the given value."""
  formationCode_lte: String

  """All values greater than the given value."""
  formationCode_gt: String

  """All values greater than or equal the given value."""
  formationCode_gte: String

  """All values containing the given string."""
  formationCode_contains: String

  """All values not containing the given string."""
  formationCode_not_contains: String

  """All values starting with the given string."""
  formationCode_starts_with: String

  """All values not starting with the given string."""
  formationCode_not_starts_with: String

  """All values ending with the given string."""
  formationCode_ends_with: String

  """All values not ending with the given string."""
  formationCode_not_ends_with: String
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  formationSubstitution_every: FormationSubstitutionFilter
  formationSubstitution_some: FormationSubstitutionFilter
  formationSubstitution_none: FormationSubstitutionFilter
  positions_every: PositionFilter
  positions_some: PositionFilter
  positions_none: PositionFilter
}

input FormationformationSubstitutionFormationSubstitution {
  gameActivityStatus: GameActivityStatus!
  gameActivityType: GameActivityType!
  gameSeconds: Int
  timestamp: DateTime
  totalSeconds: Int
  gameTeamSeasonId: ID
  gameTeamSeason: FormationSubstitutiongameTeamSeasonGameTeamSeason
}

enum FormationOrderBy {
  formationCode_ASC
  formationCode_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

input FormationpositionsPosition {
  lateralLocation: LateralLocation
  leftToRightPercent: Float
  name: String!
  positionCategoryId: ID
  positionCategory: PositionpositionCategoryPositionCategory
  formationsIds: [ID!]
  formations: [PositionformationsFormation!]
  playerPositionsIds: [ID!]
  playerPositions: [PositionplayerPositionsPlayerPosition!]
}

type FormationPreviousValues {
  formationCode: String
  id: ID!
  name: String!
}

input FormationSubscriptionFilter {
  """Logical AND on all given filters."""
  AND: [FormationSubscriptionFilter!]

  """Logical OR on all given filters."""
  OR: [FormationSubscriptionFilter!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [_ModelMutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FormationSubscriptionFilterNode
}

input FormationSubscriptionFilterNode {
  formationCode: String

  """All values that are not equal to given value."""
  formationCode_not: String

  """All values that are contained in given list."""
  formationCode_in: [String!]

  """All values that are not contained in given list."""
  formationCode_not_in: [String!]

  """All values less than the given value."""
  formationCode_lt: String

  """All values less than or equal the given value."""
  formationCode_lte: String

  """All values greater than the given value."""
  formationCode_gt: String

  """All values greater than or equal the given value."""
  formationCode_gte: String

  """All values containing the given string."""
  formationCode_contains: String

  """All values not containing the given string."""
  formationCode_not_contains: String

  """All values starting with the given string."""
  formationCode_starts_with: String

  """All values not starting with the given string."""
  formationCode_not_starts_with: String

  """All values ending with the given string."""
  formationCode_ends_with: String

  """All values not ending with the given string."""
  formationCode_not_ends_with: String
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  formationSubstitution_every: FormationSubstitutionFilter
  formationSubstitution_some: FormationSubstitutionFilter
  formationSubstitution_none: FormationSubstitutionFilter
  positions_every: PositionFilter
  positions_some: PositionFilter
  positions_none: PositionFilter
}

type FormationSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Formation
  updatedFields: [String!]
  previousValues: FormationPreviousValues
}

type FormationSubstitution implements Node {
  formation(filter: FormationFilter): Formation!
  gameActivityStatus: GameActivityStatus!
  gameActivityType: GameActivityType!
  gameSeconds: Int
  gameTeamSeason(filter: GameTeamSeasonFilter): GameTeamSeason
  id: ID!
  timestamp: DateTime
  totalSeconds: Int
}

input FormationSubstitutionFilter {
  """Logical AND on all given filters."""
  AND: [FormationSubstitutionFilter!]

  """Logical OR on all given filters."""
  OR: [FormationSubstitutionFilter!]
  gameActivityStatus: GameActivityStatus

  """All values that are not equal to given value."""
  gameActivityStatus_not: GameActivityStatus

  """All values that are contained in given list."""
  gameActivityStatus_in: [GameActivityStatus!]

  """All values that are not contained in given list."""
  gameActivityStatus_not_in: [GameActivityStatus!]
  gameActivityType: GameActivityType

  """All values that are not equal to given value."""
  gameActivityType_not: GameActivityType

  """All values that are contained in given list."""
  gameActivityType_in: [GameActivityType!]

  """All values that are not contained in given list."""
  gameActivityType_not_in: [GameActivityType!]
  gameSeconds: Int

  """All values that are not equal to given value."""
  gameSeconds_not: Int

  """All values that are contained in given list."""
  gameSeconds_in: [Int!]

  """All values that are not contained in given list."""
  gameSeconds_not_in: [Int!]

  """All values less than the given value."""
  gameSeconds_lt: Int

  """All values less than or equal the given value."""
  gameSeconds_lte: Int

  """All values greater than the given value."""
  gameSeconds_gt: Int

  """All values greater than or equal the given value."""
  gameSeconds_gte: Int
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  timestamp: DateTime

  """All values that are not equal to given value."""
  timestamp_not: DateTime

  """All values that are contained in given list."""
  timestamp_in: [DateTime!]

  """All values that are not contained in given list."""
  timestamp_not_in: [DateTime!]

  """All values less than the given value."""
  timestamp_lt: DateTime

  """All values less than or equal the given value."""
  timestamp_lte: DateTime

  """All values greater than the given value."""
  timestamp_gt: DateTime

  """All values greater than or equal the given value."""
  timestamp_gte: DateTime
  totalSeconds: Int

  """All values that are not equal to given value."""
  totalSeconds_not: Int

  """All values that are contained in given list."""
  totalSeconds_in: [Int!]

  """All values that are not contained in given list."""
  totalSeconds_not_in: [Int!]

  """All values less than the given value."""
  totalSeconds_lt: Int

  """All values less than or equal the given value."""
  totalSeconds_lte: Int

  """All values greater than the given value."""
  totalSeconds_gt: Int

  """All values greater than or equal the given value."""
  totalSeconds_gte: Int
  formation: FormationFilter
  gameTeamSeason: GameTeamSeasonFilter
}

input FormationSubstitutionformationFormation {
  formationCode: String
  name: String!
  formationSubstitutionIds: [ID!]
  formationSubstitution: [FormationformationSubstitutionFormationSubstitution!]
  positionsIds: [ID!]
  positions: [FormationpositionsPosition!]
}

input FormationSubstitutiongameTeamSeasonGameTeamSeason {
  isHomeTeam: Boolean
  name: String!
  gameId: ID
  game: GameTeamSeasongameGame
  gamePlanId: ID
  gamePlan: GameTeamSeasongamePlanGamePlan
  teamSeasonId: ID
  teamSeason: GameTeamSeasonteamSeasonTeamSeason
  formationSubstitutionsIds: [ID!]
  formationSubstitutions: [GameTeamSeasonformationSubstitutionsFormationSubstitution!]
  gamePlayersIds: [ID!]
  gamePlayers: [GameTeamSeasongamePlayersGamePlayer!]
  substitutionsIds: [ID!]
  substitutions: [GameTeamSeasonsubstitutionsSubstitution!]
}

enum FormationSubstitutionOrderBy {
  gameActivityStatus_ASC
  gameActivityStatus_DESC
  gameActivityType_ASC
  gameActivityType_DESC
  gameSeconds_ASC
  gameSeconds_DESC
  id_ASC
  id_DESC
  timestamp_ASC
  timestamp_DESC
  totalSeconds_ASC
  totalSeconds_DESC
}

type FormationSubstitutionPreviousValues {
  gameActivityStatus: GameActivityStatus!
  gameActivityType: GameActivityType!
  gameSeconds: Int
  id: ID!
  timestamp: DateTime
  totalSeconds: Int
}

input FormationSubstitutionSubscriptionFilter {
  """Logical AND on all given filters."""
  AND: [FormationSubstitutionSubscriptionFilter!]

  """Logical OR on all given filters."""
  OR: [FormationSubstitutionSubscriptionFilter!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [_ModelMutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FormationSubstitutionSubscriptionFilterNode
}

input FormationSubstitutionSubscriptionFilterNode {
  gameActivityStatus: GameActivityStatus

  """All values that are not equal to given value."""
  gameActivityStatus_not: GameActivityStatus

  """All values that are contained in given list."""
  gameActivityStatus_in: [GameActivityStatus!]

  """All values that are not contained in given list."""
  gameActivityStatus_not_in: [GameActivityStatus!]
  gameActivityType: GameActivityType

  """All values that are not equal to given value."""
  gameActivityType_not: GameActivityType

  """All values that are contained in given list."""
  gameActivityType_in: [GameActivityType!]

  """All values that are not contained in given list."""
  gameActivityType_not_in: [GameActivityType!]
  gameSeconds: Int

  """All values that are not equal to given value."""
  gameSeconds_not: Int

  """All values that are contained in given list."""
  gameSeconds_in: [Int!]

  """All values that are not contained in given list."""
  gameSeconds_not_in: [Int!]

  """All values less than the given value."""
  gameSeconds_lt: Int

  """All values less than or equal the given value."""
  gameSeconds_lte: Int

  """All values greater than the given value."""
  gameSeconds_gt: Int

  """All values greater than or equal the given value."""
  gameSeconds_gte: Int
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  timestamp: DateTime

  """All values that are not equal to given value."""
  timestamp_not: DateTime

  """All values that are contained in given list."""
  timestamp_in: [DateTime!]

  """All values that are not contained in given list."""
  timestamp_not_in: [DateTime!]

  """All values less than the given value."""
  timestamp_lt: DateTime

  """All values less than or equal the given value."""
  timestamp_lte: DateTime

  """All values greater than the given value."""
  timestamp_gt: DateTime

  """All values greater than or equal the given value."""
  timestamp_gte: DateTime
  totalSeconds: Int

  """All values that are not equal to given value."""
  totalSeconds_not: Int

  """All values that are contained in given list."""
  totalSeconds_in: [Int!]

  """All values that are not contained in given list."""
  totalSeconds_not_in: [Int!]

  """All values less than the given value."""
  totalSeconds_lt: Int

  """All values less than or equal the given value."""
  totalSeconds_lte: Int

  """All values greater than the given value."""
  totalSeconds_gt: Int

  """All values greater than or equal the given value."""
  totalSeconds_gte: Int
  formation: FormationFilter
  gameTeamSeason: GameTeamSeasonFilter
}

type FormationSubstitutionSubscriptionPayload {
  mutation: _ModelMutationType!
  node: FormationSubstitution
  updatedFields: [String!]
  previousValues: FormationSubstitutionPreviousValues
}

type Game implements Node {
  gameActivities(filter: GameActivityFilter, orderBy: GameActivityOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [GameActivity!]
  gameStatus: GameStatus!
  gameTeamSeasons(filter: GameTeamSeasonFilter, orderBy: GameTeamSeasonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [GameTeamSeason!]
  id: ID!
  location: String
  name: String!
  scheduledStartTime: DateTime

  """Meta information about the query."""
  _gameActivitiesMeta(filter: GameActivityFilter, orderBy: GameActivityOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  """Meta information about the query."""
  _gameTeamSeasonsMeta(filter: GameTeamSeasonFilter, orderBy: GameTeamSeasonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

type GameActivity implements Node {
  game(filter: GameFilter): Game!
  gameActivityStatus: GameActivityStatus!
  gameActivityType: GameActivityType!
  gamePeriod(filter: GamePeriodFilter): GamePeriod
  gameSeconds: Int
  id: ID!
  name: String
  timestamp: DateTime!
  totalSeconds: Int
}

input GameActivityFilter {
  """Logical AND on all given filters."""
  AND: [GameActivityFilter!]

  """Logical OR on all given filters."""
  OR: [GameActivityFilter!]
  gameActivityStatus: GameActivityStatus

  """All values that are not equal to given value."""
  gameActivityStatus_not: GameActivityStatus

  """All values that are contained in given list."""
  gameActivityStatus_in: [GameActivityStatus!]

  """All values that are not contained in given list."""
  gameActivityStatus_not_in: [GameActivityStatus!]
  gameActivityType: GameActivityType

  """All values that are not equal to given value."""
  gameActivityType_not: GameActivityType

  """All values that are contained in given list."""
  gameActivityType_in: [GameActivityType!]

  """All values that are not contained in given list."""
  gameActivityType_not_in: [GameActivityType!]
  gameSeconds: Int

  """All values that are not equal to given value."""
  gameSeconds_not: Int

  """All values that are contained in given list."""
  gameSeconds_in: [Int!]

  """All values that are not contained in given list."""
  gameSeconds_not_in: [Int!]

  """All values less than the given value."""
  gameSeconds_lt: Int

  """All values less than or equal the given value."""
  gameSeconds_lte: Int

  """All values greater than the given value."""
  gameSeconds_gt: Int

  """All values greater than or equal the given value."""
  gameSeconds_gte: Int
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  timestamp: DateTime

  """All values that are not equal to given value."""
  timestamp_not: DateTime

  """All values that are contained in given list."""
  timestamp_in: [DateTime!]

  """All values that are not contained in given list."""
  timestamp_not_in: [DateTime!]

  """All values less than the given value."""
  timestamp_lt: DateTime

  """All values less than or equal the given value."""
  timestamp_lte: DateTime

  """All values greater than the given value."""
  timestamp_gt: DateTime

  """All values greater than or equal the given value."""
  timestamp_gte: DateTime
  totalSeconds: Int

  """All values that are not equal to given value."""
  totalSeconds_not: Int

  """All values that are contained in given list."""
  totalSeconds_in: [Int!]

  """All values that are not contained in given list."""
  totalSeconds_not_in: [Int!]

  """All values less than the given value."""
  totalSeconds_lt: Int

  """All values less than or equal the given value."""
  totalSeconds_lte: Int

  """All values greater than the given value."""
  totalSeconds_gt: Int

  """All values greater than or equal the given value."""
  totalSeconds_gte: Int
  game: GameFilter
  gamePeriod: GamePeriodFilter
}

input GameActivitygameGame {
  gameStatus: GameStatus!
  location: String
  name: String!
  scheduledStartTime: DateTime
  gameActivitiesIds: [ID!]
  gameActivities: [GamegameActivitiesGameActivity!]
  gameTeamSeasonsIds: [ID!]
  gameTeamSeasons: [GamegameTeamSeasonsGameTeamSeason!]
}

input GameActivitygamePeriodGamePeriod {
  durationSeconds: Int
  gamePeriodType: GamePeriodType!
  name: String!
  postDurationSeconds: Int
  gameActivitiesIds: [ID!]
  gameActivities: [GamePeriodgameActivitiesGameActivity!]
  gameDefinitionsIds: [ID!]
  gameDefinitions: [GamePeriodgameDefinitionsGameDefinition!]
}

enum GameActivityOrderBy {
  gameActivityStatus_ASC
  gameActivityStatus_DESC
  gameActivityType_ASC
  gameActivityType_DESC
  gameSeconds_ASC
  gameSeconds_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  timestamp_ASC
  timestamp_DESC
  totalSeconds_ASC
  totalSeconds_DESC
}

type GameActivityPreviousValues {
  gameActivityStatus: GameActivityStatus!
  gameActivityType: GameActivityType!
  gameSeconds: Int
  id: ID!
  name: String
  timestamp: DateTime!
  totalSeconds: Int
}

enum GameActivityStatus {
  PENDING
  IN_PROGRESS
  STOPPED
  COMPLETED
}

input GameActivitySubscriptionFilter {
  """Logical AND on all given filters."""
  AND: [GameActivitySubscriptionFilter!]

  """Logical OR on all given filters."""
  OR: [GameActivitySubscriptionFilter!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [_ModelMutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GameActivitySubscriptionFilterNode
}

input GameActivitySubscriptionFilterNode {
  gameActivityStatus: GameActivityStatus

  """All values that are not equal to given value."""
  gameActivityStatus_not: GameActivityStatus

  """All values that are contained in given list."""
  gameActivityStatus_in: [GameActivityStatus!]

  """All values that are not contained in given list."""
  gameActivityStatus_not_in: [GameActivityStatus!]
  gameActivityType: GameActivityType

  """All values that are not equal to given value."""
  gameActivityType_not: GameActivityType

  """All values that are contained in given list."""
  gameActivityType_in: [GameActivityType!]

  """All values that are not contained in given list."""
  gameActivityType_not_in: [GameActivityType!]
  gameSeconds: Int

  """All values that are not equal to given value."""
  gameSeconds_not: Int

  """All values that are contained in given list."""
  gameSeconds_in: [Int!]

  """All values that are not contained in given list."""
  gameSeconds_not_in: [Int!]

  """All values less than the given value."""
  gameSeconds_lt: Int

  """All values less than or equal the given value."""
  gameSeconds_lte: Int

  """All values greater than the given value."""
  gameSeconds_gt: Int

  """All values greater than or equal the given value."""
  gameSeconds_gte: Int
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  timestamp: DateTime

  """All values that are not equal to given value."""
  timestamp_not: DateTime

  """All values that are contained in given list."""
  timestamp_in: [DateTime!]

  """All values that are not contained in given list."""
  timestamp_not_in: [DateTime!]

  """All values less than the given value."""
  timestamp_lt: DateTime

  """All values less than or equal the given value."""
  timestamp_lte: DateTime

  """All values greater than the given value."""
  timestamp_gt: DateTime

  """All values greater than or equal the given value."""
  timestamp_gte: DateTime
  totalSeconds: Int

  """All values that are not equal to given value."""
  totalSeconds_not: Int

  """All values that are contained in given list."""
  totalSeconds_in: [Int!]

  """All values that are not contained in given list."""
  totalSeconds_not_in: [Int!]

  """All values less than the given value."""
  totalSeconds_lt: Int

  """All values less than or equal the given value."""
  totalSeconds_lte: Int

  """All values greater than the given value."""
  totalSeconds_gt: Int

  """All values greater than or equal the given value."""
  totalSeconds_gte: Int
  game: GameFilter
  gamePeriod: GamePeriodFilter
}

type GameActivitySubscriptionPayload {
  mutation: _ModelMutationType!
  node: GameActivity
  updatedFields: [String!]
  previousValues: GameActivityPreviousValues
}

enum GameActivityType {
  OFFICIAL
  SUPPLEMENTAL
  DEMO
  PLAN
}

type GameDefinition implements Node {
  betweenGamesSeconds: Int
  gamePeriods(filter: GamePeriodFilter, orderBy: GamePeriodOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [GamePeriod!]
  id: ID!
  includeGoalies: Boolean
  leagues(filter: LeagueFilter, orderBy: LeagueOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [League!]
  maximumDurationSeconds: Int
  name: String!
  numberOfReferees: Int
  numberPlayersPerSide: Int
  numberSimultaneousGames: Int
  typicalDurationSeconds: Int

  """Meta information about the query."""
  _gamePeriodsMeta(filter: GamePeriodFilter, orderBy: GamePeriodOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  """Meta information about the query."""
  _leaguesMeta(filter: LeagueFilter, orderBy: LeagueOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

input GameDefinitionFilter {
  """Logical AND on all given filters."""
  AND: [GameDefinitionFilter!]

  """Logical OR on all given filters."""
  OR: [GameDefinitionFilter!]
  betweenGamesSeconds: Int

  """All values that are not equal to given value."""
  betweenGamesSeconds_not: Int

  """All values that are contained in given list."""
  betweenGamesSeconds_in: [Int!]

  """All values that are not contained in given list."""
  betweenGamesSeconds_not_in: [Int!]

  """All values less than the given value."""
  betweenGamesSeconds_lt: Int

  """All values less than or equal the given value."""
  betweenGamesSeconds_lte: Int

  """All values greater than the given value."""
  betweenGamesSeconds_gt: Int

  """All values greater than or equal the given value."""
  betweenGamesSeconds_gte: Int
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  includeGoalies: Boolean

  """All values that are not equal to given value."""
  includeGoalies_not: Boolean
  maximumDurationSeconds: Int

  """All values that are not equal to given value."""
  maximumDurationSeconds_not: Int

  """All values that are contained in given list."""
  maximumDurationSeconds_in: [Int!]

  """All values that are not contained in given list."""
  maximumDurationSeconds_not_in: [Int!]

  """All values less than the given value."""
  maximumDurationSeconds_lt: Int

  """All values less than or equal the given value."""
  maximumDurationSeconds_lte: Int

  """All values greater than the given value."""
  maximumDurationSeconds_gt: Int

  """All values greater than or equal the given value."""
  maximumDurationSeconds_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  numberOfReferees: Int

  """All values that are not equal to given value."""
  numberOfReferees_not: Int

  """All values that are contained in given list."""
  numberOfReferees_in: [Int!]

  """All values that are not contained in given list."""
  numberOfReferees_not_in: [Int!]

  """All values less than the given value."""
  numberOfReferees_lt: Int

  """All values less than or equal the given value."""
  numberOfReferees_lte: Int

  """All values greater than the given value."""
  numberOfReferees_gt: Int

  """All values greater than or equal the given value."""
  numberOfReferees_gte: Int
  numberPlayersPerSide: Int

  """All values that are not equal to given value."""
  numberPlayersPerSide_not: Int

  """All values that are contained in given list."""
  numberPlayersPerSide_in: [Int!]

  """All values that are not contained in given list."""
  numberPlayersPerSide_not_in: [Int!]

  """All values less than the given value."""
  numberPlayersPerSide_lt: Int

  """All values less than or equal the given value."""
  numberPlayersPerSide_lte: Int

  """All values greater than the given value."""
  numberPlayersPerSide_gt: Int

  """All values greater than or equal the given value."""
  numberPlayersPerSide_gte: Int
  numberSimultaneousGames: Int

  """All values that are not equal to given value."""
  numberSimultaneousGames_not: Int

  """All values that are contained in given list."""
  numberSimultaneousGames_in: [Int!]

  """All values that are not contained in given list."""
  numberSimultaneousGames_not_in: [Int!]

  """All values less than the given value."""
  numberSimultaneousGames_lt: Int

  """All values less than or equal the given value."""
  numberSimultaneousGames_lte: Int

  """All values greater than the given value."""
  numberSimultaneousGames_gt: Int

  """All values greater than or equal the given value."""
  numberSimultaneousGames_gte: Int
  typicalDurationSeconds: Int

  """All values that are not equal to given value."""
  typicalDurationSeconds_not: Int

  """All values that are contained in given list."""
  typicalDurationSeconds_in: [Int!]

  """All values that are not contained in given list."""
  typicalDurationSeconds_not_in: [Int!]

  """All values less than the given value."""
  typicalDurationSeconds_lt: Int

  """All values less than or equal the given value."""
  typicalDurationSeconds_lte: Int

  """All values greater than the given value."""
  typicalDurationSeconds_gt: Int

  """All values greater than or equal the given value."""
  typicalDurationSeconds_gte: Int
  gamePeriods_every: GamePeriodFilter
  gamePeriods_some: GamePeriodFilter
  gamePeriods_none: GamePeriodFilter
  leagues_every: LeagueFilter
  leagues_some: LeagueFilter
  leagues_none: LeagueFilter
}

input GameDefinitiongamePeriodsGamePeriod {
  durationSeconds: Int
  gamePeriodType: GamePeriodType!
  name: String!
  postDurationSeconds: Int
  gameActivitiesIds: [ID!]
  gameActivities: [GamePeriodgameActivitiesGameActivity!]
  gameDefinitionsIds: [ID!]
  gameDefinitions: [GamePeriodgameDefinitionsGameDefinition!]
}

input GameDefinitionleaguesLeague {
  name: String!
  tags: [String!]
  organizationId: ID
  organization: LeagueorganizationOrganization
  sportId: ID
  sport: LeaguesportSport
  leagueSeasonsIds: [ID!]
  leagueSeasons: [LeagueleagueSeasonsLeagueSeason!]
  seasonsIds: [ID!]
  seasons: [LeagueseasonsSeason!]
  teamsIds: [ID!]
  teams: [LeagueteamsTeam!]
}

enum GameDefinitionOrderBy {
  betweenGamesSeconds_ASC
  betweenGamesSeconds_DESC
  id_ASC
  id_DESC
  includeGoalies_ASC
  includeGoalies_DESC
  maximumDurationSeconds_ASC
  maximumDurationSeconds_DESC
  name_ASC
  name_DESC
  numberOfReferees_ASC
  numberOfReferees_DESC
  numberPlayersPerSide_ASC
  numberPlayersPerSide_DESC
  numberSimultaneousGames_ASC
  numberSimultaneousGames_DESC
  typicalDurationSeconds_ASC
  typicalDurationSeconds_DESC
}

type GameDefinitionPreviousValues {
  betweenGamesSeconds: Int
  id: ID!
  includeGoalies: Boolean
  maximumDurationSeconds: Int
  name: String!
  numberOfReferees: Int
  numberPlayersPerSide: Int
  numberSimultaneousGames: Int
  typicalDurationSeconds: Int
}

input GameDefinitionSubscriptionFilter {
  """Logical AND on all given filters."""
  AND: [GameDefinitionSubscriptionFilter!]

  """Logical OR on all given filters."""
  OR: [GameDefinitionSubscriptionFilter!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [_ModelMutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GameDefinitionSubscriptionFilterNode
}

input GameDefinitionSubscriptionFilterNode {
  betweenGamesSeconds: Int

  """All values that are not equal to given value."""
  betweenGamesSeconds_not: Int

  """All values that are contained in given list."""
  betweenGamesSeconds_in: [Int!]

  """All values that are not contained in given list."""
  betweenGamesSeconds_not_in: [Int!]

  """All values less than the given value."""
  betweenGamesSeconds_lt: Int

  """All values less than or equal the given value."""
  betweenGamesSeconds_lte: Int

  """All values greater than the given value."""
  betweenGamesSeconds_gt: Int

  """All values greater than or equal the given value."""
  betweenGamesSeconds_gte: Int
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  includeGoalies: Boolean

  """All values that are not equal to given value."""
  includeGoalies_not: Boolean
  maximumDurationSeconds: Int

  """All values that are not equal to given value."""
  maximumDurationSeconds_not: Int

  """All values that are contained in given list."""
  maximumDurationSeconds_in: [Int!]

  """All values that are not contained in given list."""
  maximumDurationSeconds_not_in: [Int!]

  """All values less than the given value."""
  maximumDurationSeconds_lt: Int

  """All values less than or equal the given value."""
  maximumDurationSeconds_lte: Int

  """All values greater than the given value."""
  maximumDurationSeconds_gt: Int

  """All values greater than or equal the given value."""
  maximumDurationSeconds_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  numberOfReferees: Int

  """All values that are not equal to given value."""
  numberOfReferees_not: Int

  """All values that are contained in given list."""
  numberOfReferees_in: [Int!]

  """All values that are not contained in given list."""
  numberOfReferees_not_in: [Int!]

  """All values less than the given value."""
  numberOfReferees_lt: Int

  """All values less than or equal the given value."""
  numberOfReferees_lte: Int

  """All values greater than the given value."""
  numberOfReferees_gt: Int

  """All values greater than or equal the given value."""
  numberOfReferees_gte: Int
  numberPlayersPerSide: Int

  """All values that are not equal to given value."""
  numberPlayersPerSide_not: Int

  """All values that are contained in given list."""
  numberPlayersPerSide_in: [Int!]

  """All values that are not contained in given list."""
  numberPlayersPerSide_not_in: [Int!]

  """All values less than the given value."""
  numberPlayersPerSide_lt: Int

  """All values less than or equal the given value."""
  numberPlayersPerSide_lte: Int

  """All values greater than the given value."""
  numberPlayersPerSide_gt: Int

  """All values greater than or equal the given value."""
  numberPlayersPerSide_gte: Int
  numberSimultaneousGames: Int

  """All values that are not equal to given value."""
  numberSimultaneousGames_not: Int

  """All values that are contained in given list."""
  numberSimultaneousGames_in: [Int!]

  """All values that are not contained in given list."""
  numberSimultaneousGames_not_in: [Int!]

  """All values less than the given value."""
  numberSimultaneousGames_lt: Int

  """All values less than or equal the given value."""
  numberSimultaneousGames_lte: Int

  """All values greater than the given value."""
  numberSimultaneousGames_gt: Int

  """All values greater than or equal the given value."""
  numberSimultaneousGames_gte: Int
  typicalDurationSeconds: Int

  """All values that are not equal to given value."""
  typicalDurationSeconds_not: Int

  """All values that are contained in given list."""
  typicalDurationSeconds_in: [Int!]

  """All values that are not contained in given list."""
  typicalDurationSeconds_not_in: [Int!]

  """All values less than the given value."""
  typicalDurationSeconds_lt: Int

  """All values less than or equal the given value."""
  typicalDurationSeconds_lte: Int

  """All values greater than the given value."""
  typicalDurationSeconds_gt: Int

  """All values greater than or equal the given value."""
  typicalDurationSeconds_gte: Int
  gamePeriods_every: GamePeriodFilter
  gamePeriods_some: GamePeriodFilter
  gamePeriods_none: GamePeriodFilter
  leagues_every: LeagueFilter
  leagues_some: LeagueFilter
  leagues_none: LeagueFilter
}

type GameDefinitionSubscriptionPayload {
  mutation: _ModelMutationType!
  node: GameDefinition
  updatedFields: [String!]
  previousValues: GameDefinitionPreviousValues
}

input GameFilter {
  """Logical AND on all given filters."""
  AND: [GameFilter!]

  """Logical OR on all given filters."""
  OR: [GameFilter!]
  gameStatus: GameStatus

  """All values that are not equal to given value."""
  gameStatus_not: GameStatus

  """All values that are contained in given list."""
  gameStatus_in: [GameStatus!]

  """All values that are not contained in given list."""
  gameStatus_not_in: [GameStatus!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  location: String

  """All values that are not equal to given value."""
  location_not: String

  """All values that are contained in given list."""
  location_in: [String!]

  """All values that are not contained in given list."""
  location_not_in: [String!]

  """All values less than the given value."""
  location_lt: String

  """All values less than or equal the given value."""
  location_lte: String

  """All values greater than the given value."""
  location_gt: String

  """All values greater than or equal the given value."""
  location_gte: String

  """All values containing the given string."""
  location_contains: String

  """All values not containing the given string."""
  location_not_contains: String

  """All values starting with the given string."""
  location_starts_with: String

  """All values not starting with the given string."""
  location_not_starts_with: String

  """All values ending with the given string."""
  location_ends_with: String

  """All values not ending with the given string."""
  location_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  scheduledStartTime: DateTime

  """All values that are not equal to given value."""
  scheduledStartTime_not: DateTime

  """All values that are contained in given list."""
  scheduledStartTime_in: [DateTime!]

  """All values that are not contained in given list."""
  scheduledStartTime_not_in: [DateTime!]

  """All values less than the given value."""
  scheduledStartTime_lt: DateTime

  """All values less than or equal the given value."""
  scheduledStartTime_lte: DateTime

  """All values greater than the given value."""
  scheduledStartTime_gt: DateTime

  """All values greater than or equal the given value."""
  scheduledStartTime_gte: DateTime
  gameActivities_every: GameActivityFilter
  gameActivities_some: GameActivityFilter
  gameActivities_none: GameActivityFilter
  gameTeamSeasons_every: GameTeamSeasonFilter
  gameTeamSeasons_some: GameTeamSeasonFilter
  gameTeamSeasons_none: GameTeamSeasonFilter
}

input GamegameActivitiesGameActivity {
  gameActivityStatus: GameActivityStatus!
  gameActivityType: GameActivityType!
  gameSeconds: Int
  name: String
  timestamp: DateTime!
  totalSeconds: Int
  gamePeriodId: ID
  gamePeriod: GameActivitygamePeriodGamePeriod
}

input GamegameTeamSeasonsGameTeamSeason {
  isHomeTeam: Boolean
  name: String!
  gamePlanId: ID
  gamePlan: GameTeamSeasongamePlanGamePlan
  teamSeasonId: ID
  teamSeason: GameTeamSeasonteamSeasonTeamSeason
  formationSubstitutionsIds: [ID!]
  formationSubstitutions: [GameTeamSeasonformationSubstitutionsFormationSubstitution!]
  gamePlayersIds: [ID!]
  gamePlayers: [GameTeamSeasongamePlayersGamePlayer!]
  substitutionsIds: [ID!]
  substitutions: [GameTeamSeasonsubstitutionsSubstitution!]
}

enum GameOrderBy {
  gameStatus_ASC
  gameStatus_DESC
  id_ASC
  id_DESC
  location_ASC
  location_DESC
  name_ASC
  name_DESC
  scheduledStartTime_ASC
  scheduledStartTime_DESC
}

type GamePeriod implements Node {
  durationSeconds: Int
  gameActivities(filter: GameActivityFilter, orderBy: GameActivityOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [GameActivity!]
  gameDefinitions(filter: GameDefinitionFilter, orderBy: GameDefinitionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [GameDefinition!]
  gamePeriodType: GamePeriodType!
  id: ID!
  name: String!
  postDurationSeconds: Int

  """Meta information about the query."""
  _gameActivitiesMeta(filter: GameActivityFilter, orderBy: GameActivityOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  """Meta information about the query."""
  _gameDefinitionsMeta(filter: GameDefinitionFilter, orderBy: GameDefinitionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

input GamePeriodFilter {
  """Logical AND on all given filters."""
  AND: [GamePeriodFilter!]

  """Logical OR on all given filters."""
  OR: [GamePeriodFilter!]
  durationSeconds: Int

  """All values that are not equal to given value."""
  durationSeconds_not: Int

  """All values that are contained in given list."""
  durationSeconds_in: [Int!]

  """All values that are not contained in given list."""
  durationSeconds_not_in: [Int!]

  """All values less than the given value."""
  durationSeconds_lt: Int

  """All values less than or equal the given value."""
  durationSeconds_lte: Int

  """All values greater than the given value."""
  durationSeconds_gt: Int

  """All values greater than or equal the given value."""
  durationSeconds_gte: Int
  gamePeriodType: GamePeriodType

  """All values that are not equal to given value."""
  gamePeriodType_not: GamePeriodType

  """All values that are contained in given list."""
  gamePeriodType_in: [GamePeriodType!]

  """All values that are not contained in given list."""
  gamePeriodType_not_in: [GamePeriodType!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  postDurationSeconds: Int

  """All values that are not equal to given value."""
  postDurationSeconds_not: Int

  """All values that are contained in given list."""
  postDurationSeconds_in: [Int!]

  """All values that are not contained in given list."""
  postDurationSeconds_not_in: [Int!]

  """All values less than the given value."""
  postDurationSeconds_lt: Int

  """All values less than or equal the given value."""
  postDurationSeconds_lte: Int

  """All values greater than the given value."""
  postDurationSeconds_gt: Int

  """All values greater than or equal the given value."""
  postDurationSeconds_gte: Int
  gameActivities_every: GameActivityFilter
  gameActivities_some: GameActivityFilter
  gameActivities_none: GameActivityFilter
  gameDefinitions_every: GameDefinitionFilter
  gameDefinitions_some: GameDefinitionFilter
  gameDefinitions_none: GameDefinitionFilter
}

input GamePeriodgameActivitiesGameActivity {
  gameActivityStatus: GameActivityStatus!
  gameActivityType: GameActivityType!
  gameSeconds: Int
  name: String
  timestamp: DateTime!
  totalSeconds: Int
  gameId: ID
  game: GameActivitygameGame
}

input GamePeriodgameDefinitionsGameDefinition {
  betweenGamesSeconds: Int
  includeGoalies: Boolean
  maximumDurationSeconds: Int
  name: String!
  numberOfReferees: Int
  numberPlayersPerSide: Int
  numberSimultaneousGames: Int
  typicalDurationSeconds: Int
  gamePeriodsIds: [ID!]
  gamePeriods: [GameDefinitiongamePeriodsGamePeriod!]
  leaguesIds: [ID!]
  leagues: [GameDefinitionleaguesLeague!]
}

enum GamePeriodOrderBy {
  durationSeconds_ASC
  durationSeconds_DESC
  gamePeriodType_ASC
  gamePeriodType_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  postDurationSeconds_ASC
  postDurationSeconds_DESC
}

type GamePeriodPreviousValues {
  durationSeconds: Int
  gamePeriodType: GamePeriodType!
  id: ID!
  name: String!
  postDurationSeconds: Int
}

input GamePeriodSubscriptionFilter {
  """Logical AND on all given filters."""
  AND: [GamePeriodSubscriptionFilter!]

  """Logical OR on all given filters."""
  OR: [GamePeriodSubscriptionFilter!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [_ModelMutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GamePeriodSubscriptionFilterNode
}

input GamePeriodSubscriptionFilterNode {
  durationSeconds: Int

  """All values that are not equal to given value."""
  durationSeconds_not: Int

  """All values that are contained in given list."""
  durationSeconds_in: [Int!]

  """All values that are not contained in given list."""
  durationSeconds_not_in: [Int!]

  """All values less than the given value."""
  durationSeconds_lt: Int

  """All values less than or equal the given value."""
  durationSeconds_lte: Int

  """All values greater than the given value."""
  durationSeconds_gt: Int

  """All values greater than or equal the given value."""
  durationSeconds_gte: Int
  gamePeriodType: GamePeriodType

  """All values that are not equal to given value."""
  gamePeriodType_not: GamePeriodType

  """All values that are contained in given list."""
  gamePeriodType_in: [GamePeriodType!]

  """All values that are not contained in given list."""
  gamePeriodType_not_in: [GamePeriodType!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  postDurationSeconds: Int

  """All values that are not equal to given value."""
  postDurationSeconds_not: Int

  """All values that are contained in given list."""
  postDurationSeconds_in: [Int!]

  """All values that are not contained in given list."""
  postDurationSeconds_not_in: [Int!]

  """All values less than the given value."""
  postDurationSeconds_lt: Int

  """All values less than or equal the given value."""
  postDurationSeconds_lte: Int

  """All values greater than the given value."""
  postDurationSeconds_gt: Int

  """All values greater than or equal the given value."""
  postDurationSeconds_gte: Int
  gameActivities_every: GameActivityFilter
  gameActivities_some: GameActivityFilter
  gameActivities_none: GameActivityFilter
  gameDefinitions_every: GameDefinitionFilter
  gameDefinitions_some: GameDefinitionFilter
  gameDefinitions_none: GameDefinitionFilter
}

type GamePeriodSubscriptionPayload {
  mutation: _ModelMutationType!
  node: GamePeriod
  updatedFields: [String!]
  previousValues: GamePeriodPreviousValues
}

enum GamePeriodType {
  REGULATION
  STANDARD_OVERTIME
  GOLDEN_GOAL_OVERTIME
  PENALTY_KICKS
}

type GamePlan implements Node {
  gameTeamSeasons(filter: GameTeamSeasonFilter, orderBy: GameTeamSeasonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [GameTeamSeason!]
  id: ID!
  minimumGameTimePercentage: Int
  secondsBetweenSubs: Int

  """Meta information about the query."""
  _gameTeamSeasonsMeta(filter: GameTeamSeasonFilter, orderBy: GameTeamSeasonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

input GamePlanFilter {
  """Logical AND on all given filters."""
  AND: [GamePlanFilter!]

  """Logical OR on all given filters."""
  OR: [GamePlanFilter!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  minimumGameTimePercentage: Int

  """All values that are not equal to given value."""
  minimumGameTimePercentage_not: Int

  """All values that are contained in given list."""
  minimumGameTimePercentage_in: [Int!]

  """All values that are not contained in given list."""
  minimumGameTimePercentage_not_in: [Int!]

  """All values less than the given value."""
  minimumGameTimePercentage_lt: Int

  """All values less than or equal the given value."""
  minimumGameTimePercentage_lte: Int

  """All values greater than the given value."""
  minimumGameTimePercentage_gt: Int

  """All values greater than or equal the given value."""
  minimumGameTimePercentage_gte: Int
  secondsBetweenSubs: Int

  """All values that are not equal to given value."""
  secondsBetweenSubs_not: Int

  """All values that are contained in given list."""
  secondsBetweenSubs_in: [Int!]

  """All values that are not contained in given list."""
  secondsBetweenSubs_not_in: [Int!]

  """All values less than the given value."""
  secondsBetweenSubs_lt: Int

  """All values less than or equal the given value."""
  secondsBetweenSubs_lte: Int

  """All values greater than the given value."""
  secondsBetweenSubs_gt: Int

  """All values greater than or equal the given value."""
  secondsBetweenSubs_gte: Int
  gameTeamSeasons_every: GameTeamSeasonFilter
  gameTeamSeasons_some: GameTeamSeasonFilter
  gameTeamSeasons_none: GameTeamSeasonFilter
}

input GamePlangameTeamSeasonsGameTeamSeason {
  isHomeTeam: Boolean
  name: String!
  gameId: ID
  game: GameTeamSeasongameGame
  teamSeasonId: ID
  teamSeason: GameTeamSeasonteamSeasonTeamSeason
  formationSubstitutionsIds: [ID!]
  formationSubstitutions: [GameTeamSeasonformationSubstitutionsFormationSubstitution!]
  gamePlayersIds: [ID!]
  gamePlayers: [GameTeamSeasongamePlayersGamePlayer!]
  substitutionsIds: [ID!]
  substitutions: [GameTeamSeasonsubstitutionsSubstitution!]
}

enum GamePlanOrderBy {
  id_ASC
  id_DESC
  minimumGameTimePercentage_ASC
  minimumGameTimePercentage_DESC
  secondsBetweenSubs_ASC
  secondsBetweenSubs_DESC
}

type GamePlanPreviousValues {
  id: ID!
  minimumGameTimePercentage: Int
  secondsBetweenSubs: Int
}

input GamePlanSubscriptionFilter {
  """Logical AND on all given filters."""
  AND: [GamePlanSubscriptionFilter!]

  """Logical OR on all given filters."""
  OR: [GamePlanSubscriptionFilter!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [_ModelMutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GamePlanSubscriptionFilterNode
}

input GamePlanSubscriptionFilterNode {
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  minimumGameTimePercentage: Int

  """All values that are not equal to given value."""
  minimumGameTimePercentage_not: Int

  """All values that are contained in given list."""
  minimumGameTimePercentage_in: [Int!]

  """All values that are not contained in given list."""
  minimumGameTimePercentage_not_in: [Int!]

  """All values less than the given value."""
  minimumGameTimePercentage_lt: Int

  """All values less than or equal the given value."""
  minimumGameTimePercentage_lte: Int

  """All values greater than the given value."""
  minimumGameTimePercentage_gt: Int

  """All values greater than or equal the given value."""
  minimumGameTimePercentage_gte: Int
  secondsBetweenSubs: Int

  """All values that are not equal to given value."""
  secondsBetweenSubs_not: Int

  """All values that are contained in given list."""
  secondsBetweenSubs_in: [Int!]

  """All values that are not contained in given list."""
  secondsBetweenSubs_not_in: [Int!]

  """All values less than the given value."""
  secondsBetweenSubs_lt: Int

  """All values less than or equal the given value."""
  secondsBetweenSubs_lte: Int

  """All values greater than the given value."""
  secondsBetweenSubs_gt: Int

  """All values greater than or equal the given value."""
  secondsBetweenSubs_gte: Int
  gameTeamSeasons_every: GameTeamSeasonFilter
  gameTeamSeasons_some: GameTeamSeasonFilter
  gameTeamSeasons_none: GameTeamSeasonFilter
}

type GamePlanSubscriptionPayload {
  mutation: _ModelMutationType!
  node: GamePlan
  updatedFields: [String!]
  previousValues: GamePlanPreviousValues
}

type GamePlayer implements Node {
  availability: Availability!
  gameTeamSeason(filter: GameTeamSeasonFilter): GameTeamSeason!
  id: ID!
  player(filter: UserFilter): User!
}

input GamePlayerFilter {
  """Logical AND on all given filters."""
  AND: [GamePlayerFilter!]

  """Logical OR on all given filters."""
  OR: [GamePlayerFilter!]
  availability: Availability

  """All values that are not equal to given value."""
  availability_not: Availability

  """All values that are contained in given list."""
  availability_in: [Availability!]

  """All values that are not contained in given list."""
  availability_not_in: [Availability!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  gameTeamSeason: GameTeamSeasonFilter
  player: UserFilter
}

input GamePlayergameTeamSeasonGameTeamSeason {
  isHomeTeam: Boolean
  name: String!
  gameId: ID
  game: GameTeamSeasongameGame
  gamePlanId: ID
  gamePlan: GameTeamSeasongamePlanGamePlan
  teamSeasonId: ID
  teamSeason: GameTeamSeasonteamSeasonTeamSeason
  formationSubstitutionsIds: [ID!]
  formationSubstitutions: [GameTeamSeasonformationSubstitutionsFormationSubstitution!]
  gamePlayersIds: [ID!]
  gamePlayers: [GameTeamSeasongamePlayersGamePlayer!]
  substitutionsIds: [ID!]
  substitutions: [GameTeamSeasonsubstitutionsSubstitution!]
}

enum GamePlayerOrderBy {
  availability_ASC
  availability_DESC
  id_ASC
  id_DESC
}

input GamePlayerplayerUser {
  dateOfBirth: DateTime
  gender: Gender
  name: String
  childrenIds: [ID!]
  children: [UserchildrenUser!]
  gamePlayersIds: [ID!]
  gamePlayers: [UsergamePlayersGamePlayer!]
  parentsGuardiansIds: [ID!]
  parentsGuardians: [UserchildrenUser!]
  playerPositionsIds: [ID!]
  playerPositions: [UserplayerPositionsPlayerPosition!]
  positionCategoryPreferencesAsPlayerIds: [ID!]
  positionCategoryPreferencesAsPlayer: [UserpositionCategoryPreferencesAsPlayerPositionCategoryPreference!]
  positionCategoryPreferencesAsPrefererIds: [ID!]
  positionCategoryPreferencesAsPreferer: [UserpositionCategoryPreferencesAsPrefererPositionCategoryPreference!]
  postsIds: [ID!]
  posts: [UserpostsPost!]
  teamsAsFanIds: [ID!]
  teamsAsFan: [UserteamsAsFanTeam!]
  teamSeasonsAsCoachIds: [ID!]
  teamSeasonsAsCoach: [UserteamSeasonsAsCoachTeamSeason!]
  teamSeasonsAsParentsIds: [ID!]
  teamSeasonsAsParents: [UserteamSeasonsAsParentsTeamSeason!]
  teamSeasonsAsPlayerIds: [ID!]
  teamSeasonsAsPlayer: [UserteamSeasonsAsPlayerTeamSeason!]
}

type GamePlayerPreviousValues {
  availability: Availability!
  id: ID!
}

input GamePlayerSubscriptionFilter {
  """Logical AND on all given filters."""
  AND: [GamePlayerSubscriptionFilter!]

  """Logical OR on all given filters."""
  OR: [GamePlayerSubscriptionFilter!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [_ModelMutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GamePlayerSubscriptionFilterNode
}

input GamePlayerSubscriptionFilterNode {
  availability: Availability

  """All values that are not equal to given value."""
  availability_not: Availability

  """All values that are contained in given list."""
  availability_in: [Availability!]

  """All values that are not contained in given list."""
  availability_not_in: [Availability!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  gameTeamSeason: GameTeamSeasonFilter
  player: UserFilter
}

type GamePlayerSubscriptionPayload {
  mutation: _ModelMutationType!
  node: GamePlayer
  updatedFields: [String!]
  previousValues: GamePlayerPreviousValues
}

type GamePreviousValues {
  gameStatus: GameStatus!
  id: ID!
  location: String
  name: String!
  scheduledStartTime: DateTime
}

enum GameStatus {
  SCHEDULED
  POSTPONED
  IN_PROGRESS
  COMPLETED
  CANCELED_PERMANENTLY
  PENDING_RESCHEDULE
}

input GameSubscriptionFilter {
  """Logical AND on all given filters."""
  AND: [GameSubscriptionFilter!]

  """Logical OR on all given filters."""
  OR: [GameSubscriptionFilter!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [_ModelMutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GameSubscriptionFilterNode
}

input GameSubscriptionFilterNode {
  gameStatus: GameStatus

  """All values that are not equal to given value."""
  gameStatus_not: GameStatus

  """All values that are contained in given list."""
  gameStatus_in: [GameStatus!]

  """All values that are not contained in given list."""
  gameStatus_not_in: [GameStatus!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  location: String

  """All values that are not equal to given value."""
  location_not: String

  """All values that are contained in given list."""
  location_in: [String!]

  """All values that are not contained in given list."""
  location_not_in: [String!]

  """All values less than the given value."""
  location_lt: String

  """All values less than or equal the given value."""
  location_lte: String

  """All values greater than the given value."""
  location_gt: String

  """All values greater than or equal the given value."""
  location_gte: String

  """All values containing the given string."""
  location_contains: String

  """All values not containing the given string."""
  location_not_contains: String

  """All values starting with the given string."""
  location_starts_with: String

  """All values not starting with the given string."""
  location_not_starts_with: String

  """All values ending with the given string."""
  location_ends_with: String

  """All values not ending with the given string."""
  location_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  scheduledStartTime: DateTime

  """All values that are not equal to given value."""
  scheduledStartTime_not: DateTime

  """All values that are contained in given list."""
  scheduledStartTime_in: [DateTime!]

  """All values that are not contained in given list."""
  scheduledStartTime_not_in: [DateTime!]

  """All values less than the given value."""
  scheduledStartTime_lt: DateTime

  """All values less than or equal the given value."""
  scheduledStartTime_lte: DateTime

  """All values greater than the given value."""
  scheduledStartTime_gt: DateTime

  """All values greater than or equal the given value."""
  scheduledStartTime_gte: DateTime
  gameActivities_every: GameActivityFilter
  gameActivities_some: GameActivityFilter
  gameActivities_none: GameActivityFilter
  gameTeamSeasons_every: GameTeamSeasonFilter
  gameTeamSeasons_some: GameTeamSeasonFilter
  gameTeamSeasons_none: GameTeamSeasonFilter
}

type GameSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Game
  updatedFields: [String!]
  previousValues: GamePreviousValues
}

type GameTeamSeason implements Node {
  formationSubstitutions(filter: FormationSubstitutionFilter, orderBy: FormationSubstitutionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [FormationSubstitution!]
  game(filter: GameFilter): Game!
  gamePlan(filter: GamePlanFilter): GamePlan
  gamePlayers(filter: GamePlayerFilter, orderBy: GamePlayerOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [GamePlayer!]
  id: ID!
  isHomeTeam: Boolean
  name: String!
  substitutions(filter: SubstitutionFilter, orderBy: SubstitutionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Substitution!]
  teamSeason(filter: TeamSeasonFilter): TeamSeason

  """Meta information about the query."""
  _formationSubstitutionsMeta(filter: FormationSubstitutionFilter, orderBy: FormationSubstitutionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  """Meta information about the query."""
  _gamePlayersMeta(filter: GamePlayerFilter, orderBy: GamePlayerOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  """Meta information about the query."""
  _substitutionsMeta(filter: SubstitutionFilter, orderBy: SubstitutionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

input GameTeamSeasonFilter {
  """Logical AND on all given filters."""
  AND: [GameTeamSeasonFilter!]

  """Logical OR on all given filters."""
  OR: [GameTeamSeasonFilter!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  isHomeTeam: Boolean

  """All values that are not equal to given value."""
  isHomeTeam_not: Boolean
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  formationSubstitutions_every: FormationSubstitutionFilter
  formationSubstitutions_some: FormationSubstitutionFilter
  formationSubstitutions_none: FormationSubstitutionFilter
  game: GameFilter
  gamePlan: GamePlanFilter
  gamePlayers_every: GamePlayerFilter
  gamePlayers_some: GamePlayerFilter
  gamePlayers_none: GamePlayerFilter
  substitutions_every: SubstitutionFilter
  substitutions_some: SubstitutionFilter
  substitutions_none: SubstitutionFilter
  teamSeason: TeamSeasonFilter
}

input GameTeamSeasonformationSubstitutionsFormationSubstitution {
  gameActivityStatus: GameActivityStatus!
  gameActivityType: GameActivityType!
  gameSeconds: Int
  timestamp: DateTime
  totalSeconds: Int
  formationId: ID
  formation: FormationSubstitutionformationFormation
}

input GameTeamSeasongameGame {
  gameStatus: GameStatus!
  location: String
  name: String!
  scheduledStartTime: DateTime
  gameActivitiesIds: [ID!]
  gameActivities: [GamegameActivitiesGameActivity!]
  gameTeamSeasonsIds: [ID!]
  gameTeamSeasons: [GamegameTeamSeasonsGameTeamSeason!]
}

input GameTeamSeasongamePlanGamePlan {
  minimumGameTimePercentage: Int
  secondsBetweenSubs: Int
  gameTeamSeasonsIds: [ID!]
  gameTeamSeasons: [GamePlangameTeamSeasonsGameTeamSeason!]
}

input GameTeamSeasongamePlayersGamePlayer {
  availability: Availability!
  playerId: ID
  player: GamePlayerplayerUser
}

enum GameTeamSeasonOrderBy {
  id_ASC
  id_DESC
  isHomeTeam_ASC
  isHomeTeam_DESC
  name_ASC
  name_DESC
}

type GameTeamSeasonPreviousValues {
  id: ID!
  isHomeTeam: Boolean
  name: String!
}

input GameTeamSeasonSubscriptionFilter {
  """Logical AND on all given filters."""
  AND: [GameTeamSeasonSubscriptionFilter!]

  """Logical OR on all given filters."""
  OR: [GameTeamSeasonSubscriptionFilter!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [_ModelMutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GameTeamSeasonSubscriptionFilterNode
}

input GameTeamSeasonSubscriptionFilterNode {
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  isHomeTeam: Boolean

  """All values that are not equal to given value."""
  isHomeTeam_not: Boolean
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  formationSubstitutions_every: FormationSubstitutionFilter
  formationSubstitutions_some: FormationSubstitutionFilter
  formationSubstitutions_none: FormationSubstitutionFilter
  game: GameFilter
  gamePlan: GamePlanFilter
  gamePlayers_every: GamePlayerFilter
  gamePlayers_some: GamePlayerFilter
  gamePlayers_none: GamePlayerFilter
  substitutions_every: SubstitutionFilter
  substitutions_some: SubstitutionFilter
  substitutions_none: SubstitutionFilter
  teamSeason: TeamSeasonFilter
}

type GameTeamSeasonSubscriptionPayload {
  mutation: _ModelMutationType!
  node: GameTeamSeason
  updatedFields: [String!]
  previousValues: GameTeamSeasonPreviousValues
}

input GameTeamSeasonsubstitutionsSubstitution {
  gameActivityStatus: GameActivityStatus!
  gameActivityType: GameActivityType!
  gameSeconds: Int
  timestamp: DateTime
  totalSeconds: Int
  playerPositionAssignmentsIds: [ID!]
  playerPositionAssignments: [SubstitutionplayerPositionAssignmentsPlayerPositionAssignment!]
}

input GameTeamSeasonteamSeasonTeamSeason {
  name: String!
  tags: [String!]
  leagueSeasonId: ID
  leagueSeason: TeamSeasonleagueSeasonLeagueSeason
  teamId: ID
  team: TeamSeasonteamTeam
  coachesIds: [ID!]
  coaches: [TeamSeasoncoachesUser!]
  gameTeamSeasonsIds: [ID!]
  gameTeamSeasons: [TeamSeasongameTeamSeasonsGameTeamSeason!]
  parentsIds: [ID!]
  parents: [TeamSeasonparentsUser!]
  playersIds: [ID!]
  players: [TeamSeasonplayersUser!]
}

enum Gender {
  FEMALE
  MALE
}

"""HelloPayload"""
type HelloPayload {
  message: String!
}

input InvokeFunctionInput {
  name: String!
  input: String!
  clientMutationId: String
}

type InvokeFunctionPayload {
  result: String!
  clientMutationId: String
}

enum LateralLocation {
  LEFT
  LEFT_CENTRAL
  CENTRAL
  RIGHT_CENTRAL
  RIGHT
}

type League implements Node {
  gameDefinition(filter: GameDefinitionFilter): GameDefinition!
  id: ID!
  leagueSeasons(filter: LeagueSeasonFilter, orderBy: LeagueSeasonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [LeagueSeason!]
  name: String!
  organization(filter: OrganizationFilter): Organization!
  seasons(filter: SeasonFilter, orderBy: SeasonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Season!]
  sport(filter: SportFilter): Sport!
  tags: [String!]
  teams(filter: TeamFilter, orderBy: TeamOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Team!]

  """Meta information about the query."""
  _leagueSeasonsMeta(filter: LeagueSeasonFilter, orderBy: LeagueSeasonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  """Meta information about the query."""
  _seasonsMeta(filter: SeasonFilter, orderBy: SeasonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  """Meta information about the query."""
  _teamsMeta(filter: TeamFilter, orderBy: TeamOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

input LeagueFilter {
  """Logical AND on all given filters."""
  AND: [LeagueFilter!]

  """Logical OR on all given filters."""
  OR: [LeagueFilter!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  gameDefinition: GameDefinitionFilter
  leagueSeasons_every: LeagueSeasonFilter
  leagueSeasons_some: LeagueSeasonFilter
  leagueSeasons_none: LeagueSeasonFilter
  organization: OrganizationFilter
  seasons_every: SeasonFilter
  seasons_some: SeasonFilter
  seasons_none: SeasonFilter
  sport: SportFilter
  teams_every: TeamFilter
  teams_some: TeamFilter
  teams_none: TeamFilter
}

input LeaguegameDefinitionGameDefinition {
  betweenGamesSeconds: Int
  includeGoalies: Boolean
  maximumDurationSeconds: Int
  name: String!
  numberOfReferees: Int
  numberPlayersPerSide: Int
  numberSimultaneousGames: Int
  typicalDurationSeconds: Int
  gamePeriodsIds: [ID!]
  gamePeriods: [GameDefinitiongamePeriodsGamePeriod!]
  leaguesIds: [ID!]
  leagues: [GameDefinitionleaguesLeague!]
}

input LeagueleagueSeasonsLeagueSeason {
  endDate: DateTime
  maximumBirthDate: DateTime
  minimumBirthDate: DateTime
  name: String!
  startDate: DateTime
  tags: [String!]
  seasonId: ID
  season: LeagueSeasonseasonSeason
  teamSeasonsIds: [ID!]
  teamSeasons: [LeagueSeasonteamSeasonsTeamSeason!]
}

enum LeagueOrderBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

input LeagueorganizationOrganization {
  location: String
  name: String!
  tags: [String!]
  leaguesIds: [ID!]
  leagues: [OrganizationleaguesLeague!]
  sportsIds: [ID!]
  sports: [OrganizationsportsSport!]
}

type LeaguePreviousValues {
  id: ID!
  name: String!
  tags: [String!]
}

type LeagueSeason implements Node {
  endDate: DateTime
  id: ID!
  league(filter: LeagueFilter): League!
  maximumBirthDate: DateTime
  minimumBirthDate: DateTime
  name: String!
  season(filter: SeasonFilter): Season!
  startDate: DateTime
  tags: [String!]
  teamSeasons(filter: TeamSeasonFilter, orderBy: TeamSeasonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [TeamSeason!]

  """Meta information about the query."""
  _teamSeasonsMeta(filter: TeamSeasonFilter, orderBy: TeamSeasonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

input LeagueSeasonFilter {
  """Logical AND on all given filters."""
  AND: [LeagueSeasonFilter!]

  """Logical OR on all given filters."""
  OR: [LeagueSeasonFilter!]
  endDate: DateTime

  """All values that are not equal to given value."""
  endDate_not: DateTime

  """All values that are contained in given list."""
  endDate_in: [DateTime!]

  """All values that are not contained in given list."""
  endDate_not_in: [DateTime!]

  """All values less than the given value."""
  endDate_lt: DateTime

  """All values less than or equal the given value."""
  endDate_lte: DateTime

  """All values greater than the given value."""
  endDate_gt: DateTime

  """All values greater than or equal the given value."""
  endDate_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  maximumBirthDate: DateTime

  """All values that are not equal to given value."""
  maximumBirthDate_not: DateTime

  """All values that are contained in given list."""
  maximumBirthDate_in: [DateTime!]

  """All values that are not contained in given list."""
  maximumBirthDate_not_in: [DateTime!]

  """All values less than the given value."""
  maximumBirthDate_lt: DateTime

  """All values less than or equal the given value."""
  maximumBirthDate_lte: DateTime

  """All values greater than the given value."""
  maximumBirthDate_gt: DateTime

  """All values greater than or equal the given value."""
  maximumBirthDate_gte: DateTime
  minimumBirthDate: DateTime

  """All values that are not equal to given value."""
  minimumBirthDate_not: DateTime

  """All values that are contained in given list."""
  minimumBirthDate_in: [DateTime!]

  """All values that are not contained in given list."""
  minimumBirthDate_not_in: [DateTime!]

  """All values less than the given value."""
  minimumBirthDate_lt: DateTime

  """All values less than or equal the given value."""
  minimumBirthDate_lte: DateTime

  """All values greater than the given value."""
  minimumBirthDate_gt: DateTime

  """All values greater than or equal the given value."""
  minimumBirthDate_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  startDate: DateTime

  """All values that are not equal to given value."""
  startDate_not: DateTime

  """All values that are contained in given list."""
  startDate_in: [DateTime!]

  """All values that are not contained in given list."""
  startDate_not_in: [DateTime!]

  """All values less than the given value."""
  startDate_lt: DateTime

  """All values less than or equal the given value."""
  startDate_lte: DateTime

  """All values greater than the given value."""
  startDate_gt: DateTime

  """All values greater than or equal the given value."""
  startDate_gte: DateTime
  league: LeagueFilter
  season: SeasonFilter
  teamSeasons_every: TeamSeasonFilter
  teamSeasons_some: TeamSeasonFilter
  teamSeasons_none: TeamSeasonFilter
}

input LeagueSeasonleagueLeague {
  name: String!
  tags: [String!]
  gameDefinitionId: ID
  gameDefinition: LeaguegameDefinitionGameDefinition
  organizationId: ID
  organization: LeagueorganizationOrganization
  sportId: ID
  sport: LeaguesportSport
  leagueSeasonsIds: [ID!]
  leagueSeasons: [LeagueleagueSeasonsLeagueSeason!]
  seasonsIds: [ID!]
  seasons: [LeagueseasonsSeason!]
  teamsIds: [ID!]
  teams: [LeagueteamsTeam!]
}

enum LeagueSeasonOrderBy {
  endDate_ASC
  endDate_DESC
  id_ASC
  id_DESC
  maximumBirthDate_ASC
  maximumBirthDate_DESC
  minimumBirthDate_ASC
  minimumBirthDate_DESC
  name_ASC
  name_DESC
  startDate_ASC
  startDate_DESC
}

type LeagueSeasonPreviousValues {
  endDate: DateTime
  id: ID!
  maximumBirthDate: DateTime
  minimumBirthDate: DateTime
  name: String!
  startDate: DateTime
  tags: [String!]
}

input LeagueSeasonseasonSeason {
  name: String!
  tags: [String!]
  timeOfYearSeason: TimeOfYearSeason
  year: Int
  leaguesIds: [ID!]
  leagues: [SeasonleaguesLeague!]
  leagueSeasonsIds: [ID!]
  leagueSeasons: [SeasonleagueSeasonsLeagueSeason!]
}

input LeagueseasonsSeason {
  name: String!
  tags: [String!]
  timeOfYearSeason: TimeOfYearSeason
  year: Int
  leaguesIds: [ID!]
  leagues: [SeasonleaguesLeague!]
  leagueSeasonsIds: [ID!]
  leagueSeasons: [SeasonleagueSeasonsLeagueSeason!]
}

input LeagueSeasonSubscriptionFilter {
  """Logical AND on all given filters."""
  AND: [LeagueSeasonSubscriptionFilter!]

  """Logical OR on all given filters."""
  OR: [LeagueSeasonSubscriptionFilter!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [_ModelMutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LeagueSeasonSubscriptionFilterNode
}

input LeagueSeasonSubscriptionFilterNode {
  endDate: DateTime

  """All values that are not equal to given value."""
  endDate_not: DateTime

  """All values that are contained in given list."""
  endDate_in: [DateTime!]

  """All values that are not contained in given list."""
  endDate_not_in: [DateTime!]

  """All values less than the given value."""
  endDate_lt: DateTime

  """All values less than or equal the given value."""
  endDate_lte: DateTime

  """All values greater than the given value."""
  endDate_gt: DateTime

  """All values greater than or equal the given value."""
  endDate_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  maximumBirthDate: DateTime

  """All values that are not equal to given value."""
  maximumBirthDate_not: DateTime

  """All values that are contained in given list."""
  maximumBirthDate_in: [DateTime!]

  """All values that are not contained in given list."""
  maximumBirthDate_not_in: [DateTime!]

  """All values less than the given value."""
  maximumBirthDate_lt: DateTime

  """All values less than or equal the given value."""
  maximumBirthDate_lte: DateTime

  """All values greater than the given value."""
  maximumBirthDate_gt: DateTime

  """All values greater than or equal the given value."""
  maximumBirthDate_gte: DateTime
  minimumBirthDate: DateTime

  """All values that are not equal to given value."""
  minimumBirthDate_not: DateTime

  """All values that are contained in given list."""
  minimumBirthDate_in: [DateTime!]

  """All values that are not contained in given list."""
  minimumBirthDate_not_in: [DateTime!]

  """All values less than the given value."""
  minimumBirthDate_lt: DateTime

  """All values less than or equal the given value."""
  minimumBirthDate_lte: DateTime

  """All values greater than the given value."""
  minimumBirthDate_gt: DateTime

  """All values greater than or equal the given value."""
  minimumBirthDate_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  startDate: DateTime

  """All values that are not equal to given value."""
  startDate_not: DateTime

  """All values that are contained in given list."""
  startDate_in: [DateTime!]

  """All values that are not contained in given list."""
  startDate_not_in: [DateTime!]

  """All values less than the given value."""
  startDate_lt: DateTime

  """All values less than or equal the given value."""
  startDate_lte: DateTime

  """All values greater than the given value."""
  startDate_gt: DateTime

  """All values greater than or equal the given value."""
  startDate_gte: DateTime
  league: LeagueFilter
  season: SeasonFilter
  teamSeasons_every: TeamSeasonFilter
  teamSeasons_some: TeamSeasonFilter
  teamSeasons_none: TeamSeasonFilter
}

type LeagueSeasonSubscriptionPayload {
  mutation: _ModelMutationType!
  node: LeagueSeason
  updatedFields: [String!]
  previousValues: LeagueSeasonPreviousValues
}

input LeagueSeasonteamSeasonsTeamSeason {
  name: String!
  tags: [String!]
  teamId: ID
  team: TeamSeasonteamTeam
  coachesIds: [ID!]
  coaches: [TeamSeasoncoachesUser!]
  gameTeamSeasonsIds: [ID!]
  gameTeamSeasons: [TeamSeasongameTeamSeasonsGameTeamSeason!]
  parentsIds: [ID!]
  parents: [TeamSeasonparentsUser!]
  playersIds: [ID!]
  players: [TeamSeasonplayersUser!]
}

input LeaguesportSport {
  name: String!
  tags: [String!]
  leaguesIds: [ID!]
  leagues: [SportleaguesLeague!]
  organizationsIds: [ID!]
  organizations: [SportorganizationsOrganization!]
}

input LeagueSubscriptionFilter {
  """Logical AND on all given filters."""
  AND: [LeagueSubscriptionFilter!]

  """Logical OR on all given filters."""
  OR: [LeagueSubscriptionFilter!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [_ModelMutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LeagueSubscriptionFilterNode
}

input LeagueSubscriptionFilterNode {
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  gameDefinition: GameDefinitionFilter
  leagueSeasons_every: LeagueSeasonFilter
  leagueSeasons_some: LeagueSeasonFilter
  leagueSeasons_none: LeagueSeasonFilter
  organization: OrganizationFilter
  seasons_every: SeasonFilter
  seasons_some: SeasonFilter
  seasons_none: SeasonFilter
  sport: SportFilter
  teams_every: TeamFilter
  teams_some: TeamFilter
  teams_none: TeamFilter
}

type LeagueSubscriptionPayload {
  mutation: _ModelMutationType!
  node: League
  updatedFields: [String!]
  previousValues: LeaguePreviousValues
}

input LeagueteamsTeam {
  name: String!
  tags: [String!]
  fansIds: [ID!]
  fans: [TeamfansUser!]
  teamSeasonsIds: [ID!]
  teamSeasons: [TeamteamSeasonsTeamSeason!]
}

type Mutation {
  createFormation(formationCode: String, name: String!, formationSubstitutionIds: [ID!], formationSubstitution: [FormationformationSubstitutionFormationSubstitution!], positionsIds: [ID!], positions: [FormationpositionsPosition!]): Formation
  createFormationSubstitution(gameActivityStatus: GameActivityStatus!, gameActivityType: GameActivityType!, gameSeconds: Int, timestamp: DateTime, totalSeconds: Int, formationId: ID, formation: FormationSubstitutionformationFormation, gameTeamSeasonId: ID, gameTeamSeason: FormationSubstitutiongameTeamSeasonGameTeamSeason): FormationSubstitution
  createGame(gameStatus: GameStatus!, location: String, name: String!, scheduledStartTime: DateTime, gameActivitiesIds: [ID!], gameActivities: [GamegameActivitiesGameActivity!], gameTeamSeasonsIds: [ID!], gameTeamSeasons: [GamegameTeamSeasonsGameTeamSeason!]): Game
  createGameActivity(gameActivityStatus: GameActivityStatus!, gameActivityType: GameActivityType!, gameSeconds: Int, name: String, timestamp: DateTime!, totalSeconds: Int, gameId: ID, game: GameActivitygameGame, gamePeriodId: ID, gamePeriod: GameActivitygamePeriodGamePeriod): GameActivity
  createGameDefinition(betweenGamesSeconds: Int, includeGoalies: Boolean, maximumDurationSeconds: Int, name: String!, numberOfReferees: Int, numberPlayersPerSide: Int, numberSimultaneousGames: Int, typicalDurationSeconds: Int, gamePeriodsIds: [ID!], gamePeriods: [GameDefinitiongamePeriodsGamePeriod!], leaguesIds: [ID!], leagues: [GameDefinitionleaguesLeague!]): GameDefinition
  createGamePeriod(durationSeconds: Int, gamePeriodType: GamePeriodType!, name: String!, postDurationSeconds: Int, gameActivitiesIds: [ID!], gameActivities: [GamePeriodgameActivitiesGameActivity!], gameDefinitionsIds: [ID!], gameDefinitions: [GamePeriodgameDefinitionsGameDefinition!]): GamePeriod
  createGamePlan(minimumGameTimePercentage: Int, secondsBetweenSubs: Int, gameTeamSeasonsIds: [ID!], gameTeamSeasons: [GamePlangameTeamSeasonsGameTeamSeason!]): GamePlan
  createGamePlayer(availability: Availability!, gameTeamSeasonId: ID, gameTeamSeason: GamePlayergameTeamSeasonGameTeamSeason, playerId: ID, player: GamePlayerplayerUser): GamePlayer
  createGameTeamSeason(isHomeTeam: Boolean, name: String!, gameId: ID, game: GameTeamSeasongameGame, gamePlanId: ID, gamePlan: GameTeamSeasongamePlanGamePlan, teamSeasonId: ID, teamSeason: GameTeamSeasonteamSeasonTeamSeason, formationSubstitutionsIds: [ID!], formationSubstitutions: [GameTeamSeasonformationSubstitutionsFormationSubstitution!], gamePlayersIds: [ID!], gamePlayers: [GameTeamSeasongamePlayersGamePlayer!], substitutionsIds: [ID!], substitutions: [GameTeamSeasonsubstitutionsSubstitution!]): GameTeamSeason
  createLeague(name: String!, tags: [String!], gameDefinitionId: ID, gameDefinition: LeaguegameDefinitionGameDefinition, organizationId: ID, organization: LeagueorganizationOrganization, sportId: ID, sport: LeaguesportSport, leagueSeasonsIds: [ID!], leagueSeasons: [LeagueleagueSeasonsLeagueSeason!], seasonsIds: [ID!], seasons: [LeagueseasonsSeason!], teamsIds: [ID!], teams: [LeagueteamsTeam!]): League
  createLeagueSeason(endDate: DateTime, maximumBirthDate: DateTime, minimumBirthDate: DateTime, name: String!, startDate: DateTime, tags: [String!], leagueId: ID, league: LeagueSeasonleagueLeague, seasonId: ID, season: LeagueSeasonseasonSeason, teamSeasonsIds: [ID!], teamSeasons: [LeagueSeasonteamSeasonsTeamSeason!]): LeagueSeason
  createOrganization(location: String, name: String!, tags: [String!], leaguesIds: [ID!], leagues: [OrganizationleaguesLeague!], sportsIds: [ID!], sports: [OrganizationsportsSport!]): Organization
  createPlayerPosition(playerId: ID, player: PlayerPositionplayerUser, positionId: ID, position: PlayerPositionpositionPosition, playerPositionAssignmentsIds: [ID!], playerPositionAssignments: [PlayerPositionplayerPositionAssignmentsPlayerPositionAssignment!]): PlayerPosition
  createPlayerPositionAssignment(playerPositionAssignmentType: PlayerPositionAssignmentType, timestamp: DateTime, playerPositionId: ID, playerPosition: PlayerPositionAssignmentplayerPositionPlayerPosition, substitutionsIds: [ID!], substitutions: [PlayerPositionAssignmentsubstitutionsSubstitution!]): PlayerPositionAssignment
  createPosition(lateralLocation: LateralLocation, leftToRightPercent: Float, name: String!, positionCategoryId: ID, positionCategory: PositionpositionCategoryPositionCategory, formationsIds: [ID!], formations: [PositionformationsFormation!], playerPositionsIds: [ID!], playerPositions: [PositionplayerPositionsPlayerPosition!]): Position
  createPositionCategory(color: String, name: String!, parkLocation: ParkLocation, pitchLocation: PitchLocation, positionCategoryPreferencesIds: [ID!], positionCategoryPreferences: [PositionCategorypositionCategoryPreferencesPositionCategoryPreference!], positionsIds: [ID!], positions: [PositionCategorypositionsPosition!]): PositionCategory
  createPositionCategoryPreference(playerId: ID, player: PositionCategoryPreferenceplayerUser, positionCategoryId: ID, positionCategory: PositionCategoryPreferencepositionCategoryPositionCategory, prefererId: ID, preferer: PositionCategoryPreferenceprefererUser): PositionCategoryPreference
  createPost(title: String!, authorId: ID, author: PostauthorUser): Post
  createSeason(name: String!, tags: [String!], timeOfYearSeason: TimeOfYearSeason, year: Int, leaguesIds: [ID!], leagues: [SeasonleaguesLeague!], leagueSeasonsIds: [ID!], leagueSeasons: [SeasonleagueSeasonsLeagueSeason!]): Season
  createSport(name: String!, tags: [String!], leaguesIds: [ID!], leagues: [SportleaguesLeague!], organizationsIds: [ID!], organizations: [SportorganizationsOrganization!]): Sport
  createSubstitution(gameActivityStatus: GameActivityStatus!, gameActivityType: GameActivityType!, gameSeconds: Int, timestamp: DateTime, totalSeconds: Int, gameTeamSeasonId: ID, gameTeamSeason: SubstitutiongameTeamSeasonGameTeamSeason, playerPositionAssignmentsIds: [ID!], playerPositionAssignments: [SubstitutionplayerPositionAssignmentsPlayerPositionAssignment!]): Substitution
  createTeam(name: String!, tags: [String!], leagueId: ID, league: TeamleagueLeague, fansIds: [ID!], fans: [TeamfansUser!], teamSeasonsIds: [ID!], teamSeasons: [TeamteamSeasonsTeamSeason!]): Team
  createTeamSeason(name: String!, tags: [String!], leagueSeasonId: ID, leagueSeason: TeamSeasonleagueSeasonLeagueSeason, teamId: ID, team: TeamSeasonteamTeam, coachesIds: [ID!], coaches: [TeamSeasoncoachesUser!], gameTeamSeasonsIds: [ID!], gameTeamSeasons: [TeamSeasongameTeamSeasonsGameTeamSeason!], parentsIds: [ID!], parents: [TeamSeasonparentsUser!], playersIds: [ID!], players: [TeamSeasonplayersUser!]): TeamSeason
  updateFormation(formationCode: String, id: ID!, name: String, formationSubstitutionIds: [ID!], formationSubstitution: [FormationformationSubstitutionFormationSubstitution!], positionsIds: [ID!], positions: [FormationpositionsPosition!]): Formation
  updateFormationSubstitution(gameActivityStatus: GameActivityStatus, gameActivityType: GameActivityType, gameSeconds: Int, id: ID!, timestamp: DateTime, totalSeconds: Int, formationId: ID, formation: FormationSubstitutionformationFormation, gameTeamSeasonId: ID, gameTeamSeason: FormationSubstitutiongameTeamSeasonGameTeamSeason): FormationSubstitution
  updateGame(gameStatus: GameStatus, id: ID!, location: String, name: String, scheduledStartTime: DateTime, gameActivitiesIds: [ID!], gameActivities: [GamegameActivitiesGameActivity!], gameTeamSeasonsIds: [ID!], gameTeamSeasons: [GamegameTeamSeasonsGameTeamSeason!]): Game
  updateGameActivity(gameActivityStatus: GameActivityStatus, gameActivityType: GameActivityType, gameSeconds: Int, id: ID!, name: String, timestamp: DateTime, totalSeconds: Int, gameId: ID, game: GameActivitygameGame, gamePeriodId: ID, gamePeriod: GameActivitygamePeriodGamePeriod): GameActivity
  updateGameDefinition(betweenGamesSeconds: Int, id: ID!, includeGoalies: Boolean, maximumDurationSeconds: Int, name: String, numberOfReferees: Int, numberPlayersPerSide: Int, numberSimultaneousGames: Int, typicalDurationSeconds: Int, gamePeriodsIds: [ID!], gamePeriods: [GameDefinitiongamePeriodsGamePeriod!], leaguesIds: [ID!], leagues: [GameDefinitionleaguesLeague!]): GameDefinition
  updateGamePeriod(durationSeconds: Int, gamePeriodType: GamePeriodType, id: ID!, name: String, postDurationSeconds: Int, gameActivitiesIds: [ID!], gameActivities: [GamePeriodgameActivitiesGameActivity!], gameDefinitionsIds: [ID!], gameDefinitions: [GamePeriodgameDefinitionsGameDefinition!]): GamePeriod
  updateGamePlan(id: ID!, minimumGameTimePercentage: Int, secondsBetweenSubs: Int, gameTeamSeasonsIds: [ID!], gameTeamSeasons: [GamePlangameTeamSeasonsGameTeamSeason!]): GamePlan
  updateGamePlayer(availability: Availability, id: ID!, gameTeamSeasonId: ID, gameTeamSeason: GamePlayergameTeamSeasonGameTeamSeason, playerId: ID, player: GamePlayerplayerUser): GamePlayer
  updateGameTeamSeason(id: ID!, isHomeTeam: Boolean, name: String, gameId: ID, game: GameTeamSeasongameGame, gamePlanId: ID, gamePlan: GameTeamSeasongamePlanGamePlan, teamSeasonId: ID, teamSeason: GameTeamSeasonteamSeasonTeamSeason, formationSubstitutionsIds: [ID!], formationSubstitutions: [GameTeamSeasonformationSubstitutionsFormationSubstitution!], gamePlayersIds: [ID!], gamePlayers: [GameTeamSeasongamePlayersGamePlayer!], substitutionsIds: [ID!], substitutions: [GameTeamSeasonsubstitutionsSubstitution!]): GameTeamSeason
  updateLeague(id: ID!, name: String, tags: [String!], gameDefinitionId: ID, gameDefinition: LeaguegameDefinitionGameDefinition, organizationId: ID, organization: LeagueorganizationOrganization, sportId: ID, sport: LeaguesportSport, leagueSeasonsIds: [ID!], leagueSeasons: [LeagueleagueSeasonsLeagueSeason!], seasonsIds: [ID!], seasons: [LeagueseasonsSeason!], teamsIds: [ID!], teams: [LeagueteamsTeam!]): League
  updateLeagueSeason(endDate: DateTime, id: ID!, maximumBirthDate: DateTime, minimumBirthDate: DateTime, name: String, startDate: DateTime, tags: [String!], leagueId: ID, league: LeagueSeasonleagueLeague, seasonId: ID, season: LeagueSeasonseasonSeason, teamSeasonsIds: [ID!], teamSeasons: [LeagueSeasonteamSeasonsTeamSeason!]): LeagueSeason
  updateOrganization(id: ID!, location: String, name: String, tags: [String!], leaguesIds: [ID!], leagues: [OrganizationleaguesLeague!], sportsIds: [ID!], sports: [OrganizationsportsSport!]): Organization
  updatePlayerPosition(id: ID!, playerId: ID, player: PlayerPositionplayerUser, positionId: ID, position: PlayerPositionpositionPosition, playerPositionAssignmentsIds: [ID!], playerPositionAssignments: [PlayerPositionplayerPositionAssignmentsPlayerPositionAssignment!]): PlayerPosition
  updatePlayerPositionAssignment(id: ID!, playerPositionAssignmentType: PlayerPositionAssignmentType, timestamp: DateTime, playerPositionId: ID, playerPosition: PlayerPositionAssignmentplayerPositionPlayerPosition, substitutionsIds: [ID!], substitutions: [PlayerPositionAssignmentsubstitutionsSubstitution!]): PlayerPositionAssignment
  updatePosition(id: ID!, lateralLocation: LateralLocation, leftToRightPercent: Float, name: String, positionCategoryId: ID, positionCategory: PositionpositionCategoryPositionCategory, formationsIds: [ID!], formations: [PositionformationsFormation!], playerPositionsIds: [ID!], playerPositions: [PositionplayerPositionsPlayerPosition!]): Position
  updatePositionCategory(color: String, id: ID!, name: String, parkLocation: ParkLocation, pitchLocation: PitchLocation, positionCategoryPreferencesIds: [ID!], positionCategoryPreferences: [PositionCategorypositionCategoryPreferencesPositionCategoryPreference!], positionsIds: [ID!], positions: [PositionCategorypositionsPosition!]): PositionCategory
  updatePositionCategoryPreference(id: ID!, playerId: ID, player: PositionCategoryPreferenceplayerUser, positionCategoryId: ID, positionCategory: PositionCategoryPreferencepositionCategoryPositionCategory, prefererId: ID, preferer: PositionCategoryPreferenceprefererUser): PositionCategoryPreference
  updatePost(id: ID!, title: String, authorId: ID, author: PostauthorUser): Post
  updateSeason(id: ID!, name: String, tags: [String!], timeOfYearSeason: TimeOfYearSeason, year: Int, leaguesIds: [ID!], leagues: [SeasonleaguesLeague!], leagueSeasonsIds: [ID!], leagueSeasons: [SeasonleagueSeasonsLeagueSeason!]): Season
  updateSport(id: ID!, name: String, tags: [String!], leaguesIds: [ID!], leagues: [SportleaguesLeague!], organizationsIds: [ID!], organizations: [SportorganizationsOrganization!]): Sport
  updateSubstitution(gameActivityStatus: GameActivityStatus, gameActivityType: GameActivityType, gameSeconds: Int, id: ID!, timestamp: DateTime, totalSeconds: Int, gameTeamSeasonId: ID, gameTeamSeason: SubstitutiongameTeamSeasonGameTeamSeason, playerPositionAssignmentsIds: [ID!], playerPositionAssignments: [SubstitutionplayerPositionAssignmentsPlayerPositionAssignment!]): Substitution
  updateTeam(id: ID!, name: String, tags: [String!], leagueId: ID, league: TeamleagueLeague, fansIds: [ID!], fans: [TeamfansUser!], teamSeasonsIds: [ID!], teamSeasons: [TeamteamSeasonsTeamSeason!]): Team
  updateTeamSeason(id: ID!, name: String, tags: [String!], leagueSeasonId: ID, leagueSeason: TeamSeasonleagueSeasonLeagueSeason, teamId: ID, team: TeamSeasonteamTeam, coachesIds: [ID!], coaches: [TeamSeasoncoachesUser!], gameTeamSeasonsIds: [ID!], gameTeamSeasons: [TeamSeasongameTeamSeasonsGameTeamSeason!], parentsIds: [ID!], parents: [TeamSeasonparentsUser!], playersIds: [ID!], players: [TeamSeasonplayersUser!]): TeamSeason
  updateUser(dateOfBirth: DateTime, gender: Gender, id: ID!, name: String, childrenIds: [ID!], children: [UserchildrenUser!], gamePlayersIds: [ID!], gamePlayers: [UsergamePlayersGamePlayer!], parentsGuardiansIds: [ID!], parentsGuardians: [UserchildrenUser!], playerPositionsIds: [ID!], playerPositions: [UserplayerPositionsPlayerPosition!], positionCategoryPreferencesAsPlayerIds: [ID!], positionCategoryPreferencesAsPlayer: [UserpositionCategoryPreferencesAsPlayerPositionCategoryPreference!], positionCategoryPreferencesAsPrefererIds: [ID!], positionCategoryPreferencesAsPreferer: [UserpositionCategoryPreferencesAsPrefererPositionCategoryPreference!], postsIds: [ID!], posts: [UserpostsPost!], teamsAsFanIds: [ID!], teamsAsFan: [UserteamsAsFanTeam!], teamSeasonsAsCoachIds: [ID!], teamSeasonsAsCoach: [UserteamSeasonsAsCoachTeamSeason!], teamSeasonsAsParentsIds: [ID!], teamSeasonsAsParents: [UserteamSeasonsAsParentsTeamSeason!], teamSeasonsAsPlayerIds: [ID!], teamSeasonsAsPlayer: [UserteamSeasonsAsPlayerTeamSeason!]): User
  updateOrCreateFormation(update: UpdateFormation!, create: CreateFormation!): Formation
  updateOrCreateFormationSubstitution(update: UpdateFormationSubstitution!, create: CreateFormationSubstitution!): FormationSubstitution
  updateOrCreateGame(update: UpdateGame!, create: CreateGame!): Game
  updateOrCreateGameActivity(update: UpdateGameActivity!, create: CreateGameActivity!): GameActivity
  updateOrCreateGameDefinition(update: UpdateGameDefinition!, create: CreateGameDefinition!): GameDefinition
  updateOrCreateGamePeriod(update: UpdateGamePeriod!, create: CreateGamePeriod!): GamePeriod
  updateOrCreateGamePlan(update: UpdateGamePlan!, create: CreateGamePlan!): GamePlan
  updateOrCreateGamePlayer(update: UpdateGamePlayer!, create: CreateGamePlayer!): GamePlayer
  updateOrCreateGameTeamSeason(update: UpdateGameTeamSeason!, create: CreateGameTeamSeason!): GameTeamSeason
  updateOrCreateLeague(update: UpdateLeague!, create: CreateLeague!): League
  updateOrCreateLeagueSeason(update: UpdateLeagueSeason!, create: CreateLeagueSeason!): LeagueSeason
  updateOrCreateOrganization(update: UpdateOrganization!, create: CreateOrganization!): Organization
  updateOrCreatePlayerPosition(update: UpdatePlayerPosition!, create: CreatePlayerPosition!): PlayerPosition
  updateOrCreatePlayerPositionAssignment(update: UpdatePlayerPositionAssignment!, create: CreatePlayerPositionAssignment!): PlayerPositionAssignment
  updateOrCreatePosition(update: UpdatePosition!, create: CreatePosition!): Position
  updateOrCreatePositionCategory(update: UpdatePositionCategory!, create: CreatePositionCategory!): PositionCategory
  updateOrCreatePositionCategoryPreference(update: UpdatePositionCategoryPreference!, create: CreatePositionCategoryPreference!): PositionCategoryPreference
  updateOrCreatePost(update: UpdatePost!, create: CreatePost!): Post
  updateOrCreateSeason(update: UpdateSeason!, create: CreateSeason!): Season
  updateOrCreateSport(update: UpdateSport!, create: CreateSport!): Sport
  updateOrCreateSubstitution(update: UpdateSubstitution!, create: CreateSubstitution!): Substitution
  updateOrCreateTeam(update: UpdateTeam!, create: CreateTeam!): Team
  updateOrCreateTeamSeason(update: UpdateTeamSeason!, create: CreateTeamSeason!): TeamSeason
  updateOrCreateUser(update: UpdateUser!, create: CreateUser!): User
  deleteFormation(id: ID!): Formation
  deleteFormationSubstitution(id: ID!): FormationSubstitution
  deleteGame(id: ID!): Game
  deleteGameActivity(id: ID!): GameActivity
  deleteGameDefinition(id: ID!): GameDefinition
  deleteGamePeriod(id: ID!): GamePeriod
  deleteGamePlan(id: ID!): GamePlan
  deleteGamePlayer(id: ID!): GamePlayer
  deleteGameTeamSeason(id: ID!): GameTeamSeason
  deleteLeague(id: ID!): League
  deleteLeagueSeason(id: ID!): LeagueSeason
  deleteOrganization(id: ID!): Organization
  deletePlayerPosition(id: ID!): PlayerPosition
  deletePlayerPositionAssignment(id: ID!): PlayerPositionAssignment
  deletePosition(id: ID!): Position
  deletePositionCategory(id: ID!): PositionCategory
  deletePositionCategoryPreference(id: ID!): PositionCategoryPreference
  deletePost(id: ID!): Post
  deleteSeason(id: ID!): Season
  deleteSport(id: ID!): Sport
  deleteSubstitution(id: ID!): Substitution
  deleteTeam(id: ID!): Team
  deleteTeamSeason(id: ID!): TeamSeason
  deleteUser(id: ID!): User
  addToChildrenParentsGuardians(parentsGuardiansUserId: ID!, childrenUserId: ID!): AddToChildrenParentsGuardiansPayload
  addToFormationOnFormationSubstitution(formationFormationId: ID!, formationSubstitutionFormationSubstitutionId: ID!): AddToFormationOnFormationSubstitutionPayload
  addToFormationsPositions(positionsPositionId: ID!, formationsFormationId: ID!): AddToFormationsPositionsPayload
  addToGameDefinitionOnLeague(leaguesLeagueId: ID!, gameDefinitionGameDefinitionId: ID!): AddToGameDefinitionOnLeaguePayload
  addToGameDefinitionsGamePeriods(gameDefinitionsGameDefinitionId: ID!, gamePeriodsGamePeriodId: ID!): AddToGameDefinitionsGamePeriodsPayload
  addToGameOnGameActivity(gameGameId: ID!, gameActivitiesGameActivityId: ID!): AddToGameOnGameActivityPayload
  addToGameOnGameTeamSeason(gameTeamSeasonsGameTeamSeasonId: ID!, gameGameId: ID!): AddToGameOnGameTeamSeasonPayload
  addToGamePeriodOnGameActivity(gameActivitiesGameActivityId: ID!, gamePeriodGamePeriodId: ID!): AddToGamePeriodOnGameActivityPayload
  addToGamePlanOnGameTeamSeason(gameTeamSeasonsGameTeamSeasonId: ID!, gamePlanGamePlanId: ID!): AddToGamePlanOnGameTeamSeasonPayload
  addToGameTeamSeasonOnFormationSubstitution(gameTeamSeasonGameTeamSeasonId: ID!, formationSubstitutionsFormationSubstitutionId: ID!): AddToGameTeamSeasonOnFormationSubstitutionPayload
  addToGameTeamSeasonOnGamePlayer(gamePlayersGamePlayerId: ID!, gameTeamSeasonGameTeamSeasonId: ID!): AddToGameTeamSeasonOnGamePlayerPayload
  addToGameTeamSeasonOnSubstitution(gameTeamSeasonGameTeamSeasonId: ID!, substitutionsSubstitutionId: ID!): AddToGameTeamSeasonOnSubstitutionPayload
  addToLeagueOnLeagueSeason(leagueSeasonsLeagueSeasonId: ID!, leagueLeagueId: ID!): AddToLeagueOnLeagueSeasonPayload
  addToLeagueOnTeam(teamsTeamId: ID!, leagueLeagueId: ID!): AddToLeagueOnTeamPayload
  addToLeagueSeasonOnTeamSeason(teamSeasonsTeamSeasonId: ID!, leagueSeasonLeagueSeasonId: ID!): AddToLeagueSeasonOnTeamSeasonPayload
  addToLeaguesSeasons(seasonsSeasonId: ID!, leaguesLeagueId: ID!): AddToLeaguesSeasonsPayload
  addToOrganizationOnLeague(leaguesLeagueId: ID!, organizationOrganizationId: ID!): AddToOrganizationOnLeaguePayload
  addToPlayerOnGamePlayers(gamePlayersGamePlayerId: ID!, playerUserId: ID!): AddToPlayerOnGamePlayersPayload
  addToPlayerOnPlayerPosition(playerPositionsPlayerPositionId: ID!, playerUserId: ID!): AddToPlayerOnPlayerPositionPayload
  addToPlayerOnPositionCategoryPreference(positionCategoryPreferencesAsPlayerPositionCategoryPreferenceId: ID!, playerUserId: ID!): AddToPlayerOnPositionCategoryPreferencePayload
  addToPlayerPositionOnPlayerPositionAssignment(playerPositionAssignmentsPlayerPositionAssignmentId: ID!, playerPositionPlayerPositionId: ID!): AddToPlayerPositionOnPlayerPositionAssignmentPayload
  addToPositionCategoryOnPosition(positionsPositionId: ID!, positionCategoryPositionCategoryId: ID!): AddToPositionCategoryOnPositionPayload
  addToPositionCategoryOnPositionCategoryPreference(positionCategoryPreferencesPositionCategoryPreferenceId: ID!, positionCategoryPositionCategoryId: ID!): AddToPositionCategoryOnPositionCategoryPreferencePayload
  addToPositionOnPlayerPosition(playerPositionsPlayerPositionId: ID!, positionPositionId: ID!): AddToPositionOnPlayerPositionPayload
  addToPrefererOnPositionCategoryPreference(positionCategoryPreferencesAsPrefererPositionCategoryPreferenceId: ID!, prefererUserId: ID!): AddToPrefererOnPositionCategoryPreferencePayload
  addToSeasonOnLeagueSeason(leagueSeasonsLeagueSeasonId: ID!, seasonSeasonId: ID!): AddToSeasonOnLeagueSeasonPayload
  addToSportOnLeague(leaguesLeagueId: ID!, sportSportId: ID!): AddToSportOnLeaguePayload
  addToSportsOrganizations(organizationsOrganizationId: ID!, sportsSportId: ID!): AddToSportsOrganizationsPayload
  addToSubstitutionsPlayerPositionAssignments(playerPositionAssignmentsPlayerPositionAssignmentId: ID!, substitutionsSubstitutionId: ID!): AddToSubstitutionsPlayerPositionAssignmentsPayload
  addToTeamOnTeamSeason(teamSeasonsTeamSeasonId: ID!, teamTeamId: ID!): AddToTeamOnTeamSeasonPayload
  addToTeamSeasonOnGameTeamSeason(gameTeamSeasonsGameTeamSeasonId: ID!, teamSeasonTeamSeasonId: ID!): AddToTeamSeasonOnGameTeamSeasonPayload
  addToTeamSeasonsCoaches(teamSeasonsAsCoachTeamSeasonId: ID!, coachesUserId: ID!): AddToTeamSeasonsCoachesPayload
  addToTeamSeasonsParents(teamSeasonsAsParentsTeamSeasonId: ID!, parentsUserId: ID!): AddToTeamSeasonsParentsPayload
  addToTeamSeasonsPlayers(teamSeasonsAsPlayerTeamSeasonId: ID!, playersUserId: ID!): AddToTeamSeasonsPlayersPayload
  addToTeamsFans(teamsAsFanTeamId: ID!, fansUserId: ID!): AddToTeamsFansPayload
  addToUserPosts(postsPostId: ID!, authorUserId: ID!): AddToUserPostsPayload
  removeFromChildrenParentsGuardians(parentsGuardiansUserId: ID!, childrenUserId: ID!): RemoveFromChildrenParentsGuardiansPayload
  removeFromFormationsPositions(positionsPositionId: ID!, formationsFormationId: ID!): RemoveFromFormationsPositionsPayload
  removeFromGameDefinitionsGamePeriods(gameDefinitionsGameDefinitionId: ID!, gamePeriodsGamePeriodId: ID!): RemoveFromGameDefinitionsGamePeriodsPayload
  removeFromGamePeriodOnGameActivity(gameActivitiesGameActivityId: ID!, gamePeriodGamePeriodId: ID!): RemoveFromGamePeriodOnGameActivityPayload
  removeFromGamePlanOnGameTeamSeason(gameTeamSeasonsGameTeamSeasonId: ID!, gamePlanGamePlanId: ID!): RemoveFromGamePlanOnGameTeamSeasonPayload
  removeFromGameTeamSeasonOnFormationSubstitution(gameTeamSeasonGameTeamSeasonId: ID!, formationSubstitutionsFormationSubstitutionId: ID!): RemoveFromGameTeamSeasonOnFormationSubstitutionPayload
  removeFromGameTeamSeasonOnSubstitution(gameTeamSeasonGameTeamSeasonId: ID!, substitutionsSubstitutionId: ID!): RemoveFromGameTeamSeasonOnSubstitutionPayload
  removeFromLeagueOnTeam(teamsTeamId: ID!, leagueLeagueId: ID!): RemoveFromLeagueOnTeamPayload
  removeFromLeaguesSeasons(seasonsSeasonId: ID!, leaguesLeagueId: ID!): RemoveFromLeaguesSeasonsPayload
  removeFromPositionCategoryOnPosition(positionsPositionId: ID!, positionCategoryPositionCategoryId: ID!): RemoveFromPositionCategoryOnPositionPayload
  removeFromPositionOnPlayerPosition(playerPositionsPlayerPositionId: ID!, positionPositionId: ID!): RemoveFromPositionOnPlayerPositionPayload
  removeFromSportsOrganizations(organizationsOrganizationId: ID!, sportsSportId: ID!): RemoveFromSportsOrganizationsPayload
  removeFromSubstitutionsPlayerPositionAssignments(playerPositionAssignmentsPlayerPositionAssignmentId: ID!, substitutionsSubstitutionId: ID!): RemoveFromSubstitutionsPlayerPositionAssignmentsPayload
  removeFromTeamSeasonOnGameTeamSeason(gameTeamSeasonsGameTeamSeasonId: ID!, teamSeasonTeamSeasonId: ID!): RemoveFromTeamSeasonOnGameTeamSeasonPayload
  removeFromTeamSeasonsCoaches(teamSeasonsAsCoachTeamSeasonId: ID!, coachesUserId: ID!): RemoveFromTeamSeasonsCoachesPayload
  removeFromTeamSeasonsParents(teamSeasonsAsParentsTeamSeasonId: ID!, parentsUserId: ID!): RemoveFromTeamSeasonsParentsPayload
  removeFromTeamSeasonsPlayers(teamSeasonsAsPlayerTeamSeasonId: ID!, playersUserId: ID!): RemoveFromTeamSeasonsPlayersPayload
  removeFromTeamsFans(teamsAsFanTeamId: ID!, fansUserId: ID!): RemoveFromTeamsFansPayload
  createUser(dateOfBirth: DateTime, gender: Gender, name: String, childrenIds: [ID!], children: [UserchildrenUser!], gamePlayersIds: [ID!], gamePlayers: [UsergamePlayersGamePlayer!], parentsGuardiansIds: [ID!], parentsGuardians: [UserchildrenUser!], playerPositionsIds: [ID!], playerPositions: [UserplayerPositionsPlayerPosition!], positionCategoryPreferencesAsPlayerIds: [ID!], positionCategoryPreferencesAsPlayer: [UserpositionCategoryPreferencesAsPlayerPositionCategoryPreference!], positionCategoryPreferencesAsPrefererIds: [ID!], positionCategoryPreferencesAsPreferer: [UserpositionCategoryPreferencesAsPrefererPositionCategoryPreference!], postsIds: [ID!], posts: [UserpostsPost!], teamsAsFanIds: [ID!], teamsAsFan: [UserteamsAsFanTeam!], teamSeasonsAsCoachIds: [ID!], teamSeasonsAsCoach: [UserteamSeasonsAsCoachTeamSeason!], teamSeasonsAsParentsIds: [ID!], teamSeasonsAsParents: [UserteamSeasonsAsParentsTeamSeason!], teamSeasonsAsPlayerIds: [ID!], teamSeasonsAsPlayer: [UserteamSeasonsAsPlayerTeamSeason!]): User
  invokeFunction(input: InvokeFunctionInput!): InvokeFunctionPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Organization implements Node {
  id: ID!
  leagues(filter: LeagueFilter, orderBy: LeagueOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [League!]
  location: String
  name: String!
  sports(filter: SportFilter, orderBy: SportOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Sport!]
  tags: [String!]

  """Meta information about the query."""
  _leaguesMeta(filter: LeagueFilter, orderBy: LeagueOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  """Meta information about the query."""
  _sportsMeta(filter: SportFilter, orderBy: SportOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

input OrganizationFilter {
  """Logical AND on all given filters."""
  AND: [OrganizationFilter!]

  """Logical OR on all given filters."""
  OR: [OrganizationFilter!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  location: String

  """All values that are not equal to given value."""
  location_not: String

  """All values that are contained in given list."""
  location_in: [String!]

  """All values that are not contained in given list."""
  location_not_in: [String!]

  """All values less than the given value."""
  location_lt: String

  """All values less than or equal the given value."""
  location_lte: String

  """All values greater than the given value."""
  location_gt: String

  """All values greater than or equal the given value."""
  location_gte: String

  """All values containing the given string."""
  location_contains: String

  """All values not containing the given string."""
  location_not_contains: String

  """All values starting with the given string."""
  location_starts_with: String

  """All values not starting with the given string."""
  location_not_starts_with: String

  """All values ending with the given string."""
  location_ends_with: String

  """All values not ending with the given string."""
  location_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  leagues_every: LeagueFilter
  leagues_some: LeagueFilter
  leagues_none: LeagueFilter
  sports_every: SportFilter
  sports_some: SportFilter
  sports_none: SportFilter
}

input OrganizationleaguesLeague {
  name: String!
  tags: [String!]
  gameDefinitionId: ID
  gameDefinition: LeaguegameDefinitionGameDefinition
  sportId: ID
  sport: LeaguesportSport
  leagueSeasonsIds: [ID!]
  leagueSeasons: [LeagueleagueSeasonsLeagueSeason!]
  seasonsIds: [ID!]
  seasons: [LeagueseasonsSeason!]
  teamsIds: [ID!]
  teams: [LeagueteamsTeam!]
}

enum OrganizationOrderBy {
  id_ASC
  id_DESC
  location_ASC
  location_DESC
  name_ASC
  name_DESC
}

type OrganizationPreviousValues {
  id: ID!
  location: String
  name: String!
  tags: [String!]
}

input OrganizationsportsSport {
  name: String!
  tags: [String!]
  leaguesIds: [ID!]
  leagues: [SportleaguesLeague!]
  organizationsIds: [ID!]
  organizations: [SportorganizationsOrganization!]
}

input OrganizationSubscriptionFilter {
  """Logical AND on all given filters."""
  AND: [OrganizationSubscriptionFilter!]

  """Logical OR on all given filters."""
  OR: [OrganizationSubscriptionFilter!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [_ModelMutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrganizationSubscriptionFilterNode
}

input OrganizationSubscriptionFilterNode {
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  location: String

  """All values that are not equal to given value."""
  location_not: String

  """All values that are contained in given list."""
  location_in: [String!]

  """All values that are not contained in given list."""
  location_not_in: [String!]

  """All values less than the given value."""
  location_lt: String

  """All values less than or equal the given value."""
  location_lte: String

  """All values greater than the given value."""
  location_gt: String

  """All values greater than or equal the given value."""
  location_gte: String

  """All values containing the given string."""
  location_contains: String

  """All values not containing the given string."""
  location_not_contains: String

  """All values starting with the given string."""
  location_starts_with: String

  """All values not starting with the given string."""
  location_not_starts_with: String

  """All values ending with the given string."""
  location_ends_with: String

  """All values not ending with the given string."""
  location_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  leagues_every: LeagueFilter
  leagues_some: LeagueFilter
  leagues_none: LeagueFilter
  sports_every: SportFilter
  sports_some: SportFilter
  sports_none: SportFilter
}

type OrganizationSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Organization
  updatedFields: [String!]
  previousValues: OrganizationPreviousValues
}

enum ParkLocation {
  FIELD
  BENCH
  UNKNOWN
}

enum PitchLocation {
  GOAL_BOX
  DEFENSIVE_END
  MIDDLE
  OFFENSIVE_END
}

type PlayerPosition implements Node {
  id: ID!
  player(filter: UserFilter): User!
  playerPositionAssignments(filter: PlayerPositionAssignmentFilter, orderBy: PlayerPositionAssignmentOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [PlayerPositionAssignment!]
  position(filter: PositionFilter): Position

  """Meta information about the query."""
  _playerPositionAssignmentsMeta(filter: PlayerPositionAssignmentFilter, orderBy: PlayerPositionAssignmentOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

type PlayerPositionAssignment implements Node {
  id: ID!
  playerPosition(filter: PlayerPositionFilter): PlayerPosition!
  playerPositionAssignmentType: PlayerPositionAssignmentType
  substitutions(filter: SubstitutionFilter, orderBy: SubstitutionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Substitution!]
  timestamp: DateTime

  """Meta information about the query."""
  _substitutionsMeta(filter: SubstitutionFilter, orderBy: SubstitutionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

input PlayerPositionAssignmentFilter {
  """Logical AND on all given filters."""
  AND: [PlayerPositionAssignmentFilter!]

  """Logical OR on all given filters."""
  OR: [PlayerPositionAssignmentFilter!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  playerPositionAssignmentType: PlayerPositionAssignmentType

  """All values that are not equal to given value."""
  playerPositionAssignmentType_not: PlayerPositionAssignmentType

  """All values that are contained in given list."""
  playerPositionAssignmentType_in: [PlayerPositionAssignmentType!]

  """All values that are not contained in given list."""
  playerPositionAssignmentType_not_in: [PlayerPositionAssignmentType!]
  timestamp: DateTime

  """All values that are not equal to given value."""
  timestamp_not: DateTime

  """All values that are contained in given list."""
  timestamp_in: [DateTime!]

  """All values that are not contained in given list."""
  timestamp_not_in: [DateTime!]

  """All values less than the given value."""
  timestamp_lt: DateTime

  """All values less than or equal the given value."""
  timestamp_lte: DateTime

  """All values greater than the given value."""
  timestamp_gt: DateTime

  """All values greater than or equal the given value."""
  timestamp_gte: DateTime
  playerPosition: PlayerPositionFilter
  substitutions_every: SubstitutionFilter
  substitutions_some: SubstitutionFilter
  substitutions_none: SubstitutionFilter
}

enum PlayerPositionAssignmentOrderBy {
  id_ASC
  id_DESC
  playerPositionAssignmentType_ASC
  playerPositionAssignmentType_DESC
  timestamp_ASC
  timestamp_DESC
}

input PlayerPositionAssignmentplayerPositionPlayerPosition {
  playerId: ID
  player: PlayerPositionplayerUser
  positionId: ID
  position: PlayerPositionpositionPosition
  playerPositionAssignmentsIds: [ID!]
  playerPositionAssignments: [PlayerPositionplayerPositionAssignmentsPlayerPositionAssignment!]
}

type PlayerPositionAssignmentPreviousValues {
  id: ID!
  playerPositionAssignmentType: PlayerPositionAssignmentType
  timestamp: DateTime
}

input PlayerPositionAssignmentSubscriptionFilter {
  """Logical AND on all given filters."""
  AND: [PlayerPositionAssignmentSubscriptionFilter!]

  """Logical OR on all given filters."""
  OR: [PlayerPositionAssignmentSubscriptionFilter!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [_ModelMutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PlayerPositionAssignmentSubscriptionFilterNode
}

input PlayerPositionAssignmentSubscriptionFilterNode {
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  playerPositionAssignmentType: PlayerPositionAssignmentType

  """All values that are not equal to given value."""
  playerPositionAssignmentType_not: PlayerPositionAssignmentType

  """All values that are contained in given list."""
  playerPositionAssignmentType_in: [PlayerPositionAssignmentType!]

  """All values that are not contained in given list."""
  playerPositionAssignmentType_not_in: [PlayerPositionAssignmentType!]
  timestamp: DateTime

  """All values that are not equal to given value."""
  timestamp_not: DateTime

  """All values that are contained in given list."""
  timestamp_in: [DateTime!]

  """All values that are not contained in given list."""
  timestamp_not_in: [DateTime!]

  """All values less than the given value."""
  timestamp_lt: DateTime

  """All values less than or equal the given value."""
  timestamp_lte: DateTime

  """All values greater than the given value."""
  timestamp_gt: DateTime

  """All values greater than or equal the given value."""
  timestamp_gte: DateTime
  playerPosition: PlayerPositionFilter
  substitutions_every: SubstitutionFilter
  substitutions_some: SubstitutionFilter
  substitutions_none: SubstitutionFilter
}

type PlayerPositionAssignmentSubscriptionPayload {
  mutation: _ModelMutationType!
  node: PlayerPositionAssignment
  updatedFields: [String!]
  previousValues: PlayerPositionAssignmentPreviousValues
}

input PlayerPositionAssignmentsubstitutionsSubstitution {
  gameActivityStatus: GameActivityStatus!
  gameActivityType: GameActivityType!
  gameSeconds: Int
  timestamp: DateTime
  totalSeconds: Int
  gameTeamSeasonId: ID
  gameTeamSeason: SubstitutiongameTeamSeasonGameTeamSeason
  playerPositionAssignmentsIds: [ID!]
  playerPositionAssignments: [SubstitutionplayerPositionAssignmentsPlayerPositionAssignment!]
}

enum PlayerPositionAssignmentType {
  CHANGE
  INITIAL
  IN
  OUT
  UNAVAILABLE
}

input PlayerPositionFilter {
  """Logical AND on all given filters."""
  AND: [PlayerPositionFilter!]

  """Logical OR on all given filters."""
  OR: [PlayerPositionFilter!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  player: UserFilter
  playerPositionAssignments_every: PlayerPositionAssignmentFilter
  playerPositionAssignments_some: PlayerPositionAssignmentFilter
  playerPositionAssignments_none: PlayerPositionAssignmentFilter
  position: PositionFilter
}

enum PlayerPositionOrderBy {
  id_ASC
  id_DESC
}

input PlayerPositionplayerPositionAssignmentsPlayerPositionAssignment {
  playerPositionAssignmentType: PlayerPositionAssignmentType
  timestamp: DateTime
  substitutionsIds: [ID!]
  substitutions: [PlayerPositionAssignmentsubstitutionsSubstitution!]
}

input PlayerPositionplayerUser {
  dateOfBirth: DateTime
  gender: Gender
  name: String
  childrenIds: [ID!]
  children: [UserchildrenUser!]
  gamePlayersIds: [ID!]
  gamePlayers: [UsergamePlayersGamePlayer!]
  parentsGuardiansIds: [ID!]
  parentsGuardians: [UserchildrenUser!]
  playerPositionsIds: [ID!]
  playerPositions: [UserplayerPositionsPlayerPosition!]
  positionCategoryPreferencesAsPlayerIds: [ID!]
  positionCategoryPreferencesAsPlayer: [UserpositionCategoryPreferencesAsPlayerPositionCategoryPreference!]
  positionCategoryPreferencesAsPrefererIds: [ID!]
  positionCategoryPreferencesAsPreferer: [UserpositionCategoryPreferencesAsPrefererPositionCategoryPreference!]
  postsIds: [ID!]
  posts: [UserpostsPost!]
  teamsAsFanIds: [ID!]
  teamsAsFan: [UserteamsAsFanTeam!]
  teamSeasonsAsCoachIds: [ID!]
  teamSeasonsAsCoach: [UserteamSeasonsAsCoachTeamSeason!]
  teamSeasonsAsParentsIds: [ID!]
  teamSeasonsAsParents: [UserteamSeasonsAsParentsTeamSeason!]
  teamSeasonsAsPlayerIds: [ID!]
  teamSeasonsAsPlayer: [UserteamSeasonsAsPlayerTeamSeason!]
}

input PlayerPositionpositionPosition {
  lateralLocation: LateralLocation
  leftToRightPercent: Float
  name: String!
  positionCategoryId: ID
  positionCategory: PositionpositionCategoryPositionCategory
  formationsIds: [ID!]
  formations: [PositionformationsFormation!]
  playerPositionsIds: [ID!]
  playerPositions: [PositionplayerPositionsPlayerPosition!]
}

type PlayerPositionPreviousValues {
  id: ID!
}

input PlayerPositionSubscriptionFilter {
  """Logical AND on all given filters."""
  AND: [PlayerPositionSubscriptionFilter!]

  """Logical OR on all given filters."""
  OR: [PlayerPositionSubscriptionFilter!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [_ModelMutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PlayerPositionSubscriptionFilterNode
}

input PlayerPositionSubscriptionFilterNode {
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  player: UserFilter
  playerPositionAssignments_every: PlayerPositionAssignmentFilter
  playerPositionAssignments_some: PlayerPositionAssignmentFilter
  playerPositionAssignments_none: PlayerPositionAssignmentFilter
  position: PositionFilter
}

type PlayerPositionSubscriptionPayload {
  mutation: _ModelMutationType!
  node: PlayerPosition
  updatedFields: [String!]
  previousValues: PlayerPositionPreviousValues
}

type Position implements Node {
  formations(filter: FormationFilter, orderBy: FormationOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Formation!]
  id: ID!
  lateralLocation: LateralLocation
  leftToRightPercent: Float
  name: String!
  playerPositions(filter: PlayerPositionFilter, orderBy: PlayerPositionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [PlayerPosition!]
  positionCategory(filter: PositionCategoryFilter): PositionCategory

  """Meta information about the query."""
  _formationsMeta(filter: FormationFilter, orderBy: FormationOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  """Meta information about the query."""
  _playerPositionsMeta(filter: PlayerPositionFilter, orderBy: PlayerPositionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

type PositionCategory implements Node {
  color: String
  id: ID!
  name: String!
  parkLocation: ParkLocation
  pitchLocation: PitchLocation
  positionCategoryPreferences(filter: PositionCategoryPreferenceFilter, orderBy: PositionCategoryPreferenceOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [PositionCategoryPreference!]
  positions(filter: PositionFilter, orderBy: PositionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Position!]

  """Meta information about the query."""
  _positionCategoryPreferencesMeta(filter: PositionCategoryPreferenceFilter, orderBy: PositionCategoryPreferenceOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  """Meta information about the query."""
  _positionsMeta(filter: PositionFilter, orderBy: PositionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

input PositionCategoryFilter {
  """Logical AND on all given filters."""
  AND: [PositionCategoryFilter!]

  """Logical OR on all given filters."""
  OR: [PositionCategoryFilter!]
  color: String

  """All values that are not equal to given value."""
  color_not: String

  """All values that are contained in given list."""
  color_in: [String!]

  """All values that are not contained in given list."""
  color_not_in: [String!]

  """All values less than the given value."""
  color_lt: String

  """All values less than or equal the given value."""
  color_lte: String

  """All values greater than the given value."""
  color_gt: String

  """All values greater than or equal the given value."""
  color_gte: String

  """All values containing the given string."""
  color_contains: String

  """All values not containing the given string."""
  color_not_contains: String

  """All values starting with the given string."""
  color_starts_with: String

  """All values not starting with the given string."""
  color_not_starts_with: String

  """All values ending with the given string."""
  color_ends_with: String

  """All values not ending with the given string."""
  color_not_ends_with: String
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  parkLocation: ParkLocation

  """All values that are not equal to given value."""
  parkLocation_not: ParkLocation

  """All values that are contained in given list."""
  parkLocation_in: [ParkLocation!]

  """All values that are not contained in given list."""
  parkLocation_not_in: [ParkLocation!]
  pitchLocation: PitchLocation

  """All values that are not equal to given value."""
  pitchLocation_not: PitchLocation

  """All values that are contained in given list."""
  pitchLocation_in: [PitchLocation!]

  """All values that are not contained in given list."""
  pitchLocation_not_in: [PitchLocation!]
  positionCategoryPreferences_every: PositionCategoryPreferenceFilter
  positionCategoryPreferences_some: PositionCategoryPreferenceFilter
  positionCategoryPreferences_none: PositionCategoryPreferenceFilter
  positions_every: PositionFilter
  positions_some: PositionFilter
  positions_none: PositionFilter
}

enum PositionCategoryOrderBy {
  color_ASC
  color_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  parkLocation_ASC
  parkLocation_DESC
  pitchLocation_ASC
  pitchLocation_DESC
}

input PositionCategorypositionCategoryPreferencesPositionCategoryPreference {
  playerId: ID
  player: PositionCategoryPreferenceplayerUser
  prefererId: ID
  preferer: PositionCategoryPreferenceprefererUser
}

input PositionCategorypositionsPosition {
  lateralLocation: LateralLocation
  leftToRightPercent: Float
  name: String!
  formationsIds: [ID!]
  formations: [PositionformationsFormation!]
  playerPositionsIds: [ID!]
  playerPositions: [PositionplayerPositionsPlayerPosition!]
}

type PositionCategoryPreference implements Node {
  id: ID!
  player(filter: UserFilter): User!
  positionCategory(filter: PositionCategoryFilter): PositionCategory!
  preferer(filter: UserFilter): User!
}

input PositionCategoryPreferenceFilter {
  """Logical AND on all given filters."""
  AND: [PositionCategoryPreferenceFilter!]

  """Logical OR on all given filters."""
  OR: [PositionCategoryPreferenceFilter!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  player: UserFilter
  positionCategory: PositionCategoryFilter
  preferer: UserFilter
}

enum PositionCategoryPreferenceOrderBy {
  id_ASC
  id_DESC
}

input PositionCategoryPreferenceplayerUser {
  dateOfBirth: DateTime
  gender: Gender
  name: String
  childrenIds: [ID!]
  children: [UserchildrenUser!]
  gamePlayersIds: [ID!]
  gamePlayers: [UsergamePlayersGamePlayer!]
  parentsGuardiansIds: [ID!]
  parentsGuardians: [UserchildrenUser!]
  playerPositionsIds: [ID!]
  playerPositions: [UserplayerPositionsPlayerPosition!]
  positionCategoryPreferencesAsPlayerIds: [ID!]
  positionCategoryPreferencesAsPlayer: [UserpositionCategoryPreferencesAsPlayerPositionCategoryPreference!]
  positionCategoryPreferencesAsPrefererIds: [ID!]
  positionCategoryPreferencesAsPreferer: [UserpositionCategoryPreferencesAsPrefererPositionCategoryPreference!]
  postsIds: [ID!]
  posts: [UserpostsPost!]
  teamsAsFanIds: [ID!]
  teamsAsFan: [UserteamsAsFanTeam!]
  teamSeasonsAsCoachIds: [ID!]
  teamSeasonsAsCoach: [UserteamSeasonsAsCoachTeamSeason!]
  teamSeasonsAsParentsIds: [ID!]
  teamSeasonsAsParents: [UserteamSeasonsAsParentsTeamSeason!]
  teamSeasonsAsPlayerIds: [ID!]
  teamSeasonsAsPlayer: [UserteamSeasonsAsPlayerTeamSeason!]
}

input PositionCategoryPreferencepositionCategoryPositionCategory {
  color: String
  name: String!
  parkLocation: ParkLocation
  pitchLocation: PitchLocation
  positionCategoryPreferencesIds: [ID!]
  positionCategoryPreferences: [PositionCategorypositionCategoryPreferencesPositionCategoryPreference!]
  positionsIds: [ID!]
  positions: [PositionCategorypositionsPosition!]
}

input PositionCategoryPreferenceprefererUser {
  dateOfBirth: DateTime
  gender: Gender
  name: String
  childrenIds: [ID!]
  children: [UserchildrenUser!]
  gamePlayersIds: [ID!]
  gamePlayers: [UsergamePlayersGamePlayer!]
  parentsGuardiansIds: [ID!]
  parentsGuardians: [UserchildrenUser!]
  playerPositionsIds: [ID!]
  playerPositions: [UserplayerPositionsPlayerPosition!]
  positionCategoryPreferencesAsPlayerIds: [ID!]
  positionCategoryPreferencesAsPlayer: [UserpositionCategoryPreferencesAsPlayerPositionCategoryPreference!]
  positionCategoryPreferencesAsPrefererIds: [ID!]
  positionCategoryPreferencesAsPreferer: [UserpositionCategoryPreferencesAsPrefererPositionCategoryPreference!]
  postsIds: [ID!]
  posts: [UserpostsPost!]
  teamsAsFanIds: [ID!]
  teamsAsFan: [UserteamsAsFanTeam!]
  teamSeasonsAsCoachIds: [ID!]
  teamSeasonsAsCoach: [UserteamSeasonsAsCoachTeamSeason!]
  teamSeasonsAsParentsIds: [ID!]
  teamSeasonsAsParents: [UserteamSeasonsAsParentsTeamSeason!]
  teamSeasonsAsPlayerIds: [ID!]
  teamSeasonsAsPlayer: [UserteamSeasonsAsPlayerTeamSeason!]
}

type PositionCategoryPreferencePreviousValues {
  id: ID!
}

input PositionCategoryPreferenceSubscriptionFilter {
  """Logical AND on all given filters."""
  AND: [PositionCategoryPreferenceSubscriptionFilter!]

  """Logical OR on all given filters."""
  OR: [PositionCategoryPreferenceSubscriptionFilter!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [_ModelMutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PositionCategoryPreferenceSubscriptionFilterNode
}

input PositionCategoryPreferenceSubscriptionFilterNode {
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  player: UserFilter
  positionCategory: PositionCategoryFilter
  preferer: UserFilter
}

type PositionCategoryPreferenceSubscriptionPayload {
  mutation: _ModelMutationType!
  node: PositionCategoryPreference
  updatedFields: [String!]
  previousValues: PositionCategoryPreferencePreviousValues
}

type PositionCategoryPreviousValues {
  color: String
  id: ID!
  name: String!
  parkLocation: ParkLocation
  pitchLocation: PitchLocation
}

input PositionCategorySubscriptionFilter {
  """Logical AND on all given filters."""
  AND: [PositionCategorySubscriptionFilter!]

  """Logical OR on all given filters."""
  OR: [PositionCategorySubscriptionFilter!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [_ModelMutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PositionCategorySubscriptionFilterNode
}

input PositionCategorySubscriptionFilterNode {
  color: String

  """All values that are not equal to given value."""
  color_not: String

  """All values that are contained in given list."""
  color_in: [String!]

  """All values that are not contained in given list."""
  color_not_in: [String!]

  """All values less than the given value."""
  color_lt: String

  """All values less than or equal the given value."""
  color_lte: String

  """All values greater than the given value."""
  color_gt: String

  """All values greater than or equal the given value."""
  color_gte: String

  """All values containing the given string."""
  color_contains: String

  """All values not containing the given string."""
  color_not_contains: String

  """All values starting with the given string."""
  color_starts_with: String

  """All values not starting with the given string."""
  color_not_starts_with: String

  """All values ending with the given string."""
  color_ends_with: String

  """All values not ending with the given string."""
  color_not_ends_with: String
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  parkLocation: ParkLocation

  """All values that are not equal to given value."""
  parkLocation_not: ParkLocation

  """All values that are contained in given list."""
  parkLocation_in: [ParkLocation!]

  """All values that are not contained in given list."""
  parkLocation_not_in: [ParkLocation!]
  pitchLocation: PitchLocation

  """All values that are not equal to given value."""
  pitchLocation_not: PitchLocation

  """All values that are contained in given list."""
  pitchLocation_in: [PitchLocation!]

  """All values that are not contained in given list."""
  pitchLocation_not_in: [PitchLocation!]
  positionCategoryPreferences_every: PositionCategoryPreferenceFilter
  positionCategoryPreferences_some: PositionCategoryPreferenceFilter
  positionCategoryPreferences_none: PositionCategoryPreferenceFilter
  positions_every: PositionFilter
  positions_some: PositionFilter
  positions_none: PositionFilter
}

type PositionCategorySubscriptionPayload {
  mutation: _ModelMutationType!
  node: PositionCategory
  updatedFields: [String!]
  previousValues: PositionCategoryPreviousValues
}

input PositionFilter {
  """Logical AND on all given filters."""
  AND: [PositionFilter!]

  """Logical OR on all given filters."""
  OR: [PositionFilter!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  lateralLocation: LateralLocation

  """All values that are not equal to given value."""
  lateralLocation_not: LateralLocation

  """All values that are contained in given list."""
  lateralLocation_in: [LateralLocation!]

  """All values that are not contained in given list."""
  lateralLocation_not_in: [LateralLocation!]
  leftToRightPercent: Float

  """All values that are not equal to given value."""
  leftToRightPercent_not: Float

  """All values that are contained in given list."""
  leftToRightPercent_in: [Float!]

  """All values that are not contained in given list."""
  leftToRightPercent_not_in: [Float!]

  """All values less than the given value."""
  leftToRightPercent_lt: Float

  """All values less than or equal the given value."""
  leftToRightPercent_lte: Float

  """All values greater than the given value."""
  leftToRightPercent_gt: Float

  """All values greater than or equal the given value."""
  leftToRightPercent_gte: Float
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  formations_every: FormationFilter
  formations_some: FormationFilter
  formations_none: FormationFilter
  playerPositions_every: PlayerPositionFilter
  playerPositions_some: PlayerPositionFilter
  playerPositions_none: PlayerPositionFilter
  positionCategory: PositionCategoryFilter
}

input PositionformationsFormation {
  formationCode: String
  name: String!
  formationSubstitutionIds: [ID!]
  formationSubstitution: [FormationformationSubstitutionFormationSubstitution!]
  positionsIds: [ID!]
  positions: [FormationpositionsPosition!]
}

enum PositionOrderBy {
  id_ASC
  id_DESC
  lateralLocation_ASC
  lateralLocation_DESC
  leftToRightPercent_ASC
  leftToRightPercent_DESC
  name_ASC
  name_DESC
}

input PositionplayerPositionsPlayerPosition {
  playerId: ID
  player: PlayerPositionplayerUser
  playerPositionAssignmentsIds: [ID!]
  playerPositionAssignments: [PlayerPositionplayerPositionAssignmentsPlayerPositionAssignment!]
}

input PositionpositionCategoryPositionCategory {
  color: String
  name: String!
  parkLocation: ParkLocation
  pitchLocation: PitchLocation
  positionCategoryPreferencesIds: [ID!]
  positionCategoryPreferences: [PositionCategorypositionCategoryPreferencesPositionCategoryPreference!]
  positionsIds: [ID!]
  positions: [PositionCategorypositionsPosition!]
}

type PositionPreviousValues {
  id: ID!
  lateralLocation: LateralLocation
  leftToRightPercent: Float
  name: String!
}

input PositionSubscriptionFilter {
  """Logical AND on all given filters."""
  AND: [PositionSubscriptionFilter!]

  """Logical OR on all given filters."""
  OR: [PositionSubscriptionFilter!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [_ModelMutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PositionSubscriptionFilterNode
}

input PositionSubscriptionFilterNode {
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  lateralLocation: LateralLocation

  """All values that are not equal to given value."""
  lateralLocation_not: LateralLocation

  """All values that are contained in given list."""
  lateralLocation_in: [LateralLocation!]

  """All values that are not contained in given list."""
  lateralLocation_not_in: [LateralLocation!]
  leftToRightPercent: Float

  """All values that are not equal to given value."""
  leftToRightPercent_not: Float

  """All values that are contained in given list."""
  leftToRightPercent_in: [Float!]

  """All values that are not contained in given list."""
  leftToRightPercent_not_in: [Float!]

  """All values less than the given value."""
  leftToRightPercent_lt: Float

  """All values less than or equal the given value."""
  leftToRightPercent_lte: Float

  """All values greater than the given value."""
  leftToRightPercent_gt: Float

  """All values greater than or equal the given value."""
  leftToRightPercent_gte: Float
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  formations_every: FormationFilter
  formations_some: FormationFilter
  formations_none: FormationFilter
  playerPositions_every: PlayerPositionFilter
  playerPositions_some: PlayerPositionFilter
  playerPositions_none: PlayerPositionFilter
  positionCategory: PositionCategoryFilter
}

type PositionSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Position
  updatedFields: [String!]
  previousValues: PositionPreviousValues
}

type Post implements Node {
  author(filter: UserFilter): User!
  id: ID!
  title: String!
}

input PostauthorUser {
  dateOfBirth: DateTime
  gender: Gender
  name: String
  childrenIds: [ID!]
  children: [UserchildrenUser!]
  gamePlayersIds: [ID!]
  gamePlayers: [UsergamePlayersGamePlayer!]
  parentsGuardiansIds: [ID!]
  parentsGuardians: [UserchildrenUser!]
  playerPositionsIds: [ID!]
  playerPositions: [UserplayerPositionsPlayerPosition!]
  positionCategoryPreferencesAsPlayerIds: [ID!]
  positionCategoryPreferencesAsPlayer: [UserpositionCategoryPreferencesAsPlayerPositionCategoryPreference!]
  positionCategoryPreferencesAsPrefererIds: [ID!]
  positionCategoryPreferencesAsPreferer: [UserpositionCategoryPreferencesAsPrefererPositionCategoryPreference!]
  postsIds: [ID!]
  posts: [UserpostsPost!]
  teamsAsFanIds: [ID!]
  teamsAsFan: [UserteamsAsFanTeam!]
  teamSeasonsAsCoachIds: [ID!]
  teamSeasonsAsCoach: [UserteamSeasonsAsCoachTeamSeason!]
  teamSeasonsAsParentsIds: [ID!]
  teamSeasonsAsParents: [UserteamSeasonsAsParentsTeamSeason!]
  teamSeasonsAsPlayerIds: [ID!]
  teamSeasonsAsPlayer: [UserteamSeasonsAsPlayerTeamSeason!]
}

input PostFilter {
  """Logical AND on all given filters."""
  AND: [PostFilter!]

  """Logical OR on all given filters."""
  OR: [PostFilter!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  author: UserFilter
}

enum PostOrderBy {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
}

type PostPreviousValues {
  id: ID!
  title: String!
}

input PostSubscriptionFilter {
  """Logical AND on all given filters."""
  AND: [PostSubscriptionFilter!]

  """Logical OR on all given filters."""
  OR: [PostSubscriptionFilter!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [_ModelMutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostSubscriptionFilterNode
}

input PostSubscriptionFilterNode {
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  author: UserFilter
}

type PostSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

type Query {
  allFormations(filter: FormationFilter, orderBy: FormationOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Formation!]!
  allFormationSubstitutions(filter: FormationSubstitutionFilter, orderBy: FormationSubstitutionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [FormationSubstitution!]!
  allGames(filter: GameFilter, orderBy: GameOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Game!]!
  allGameActivities(filter: GameActivityFilter, orderBy: GameActivityOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [GameActivity!]!
  allGameDefinitions(filter: GameDefinitionFilter, orderBy: GameDefinitionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [GameDefinition!]!
  allGamePeriods(filter: GamePeriodFilter, orderBy: GamePeriodOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [GamePeriod!]!
  allGamePlans(filter: GamePlanFilter, orderBy: GamePlanOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [GamePlan!]!
  allGamePlayers(filter: GamePlayerFilter, orderBy: GamePlayerOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [GamePlayer!]!
  allGameTeamSeasons(filter: GameTeamSeasonFilter, orderBy: GameTeamSeasonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [GameTeamSeason!]!
  allLeagues(filter: LeagueFilter, orderBy: LeagueOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [League!]!
  allLeagueSeasons(filter: LeagueSeasonFilter, orderBy: LeagueSeasonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [LeagueSeason!]!
  allOrganizations(filter: OrganizationFilter, orderBy: OrganizationOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Organization!]!
  allPlayerPositions(filter: PlayerPositionFilter, orderBy: PlayerPositionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [PlayerPosition!]!
  allPlayerPositionAssignments(filter: PlayerPositionAssignmentFilter, orderBy: PlayerPositionAssignmentOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [PlayerPositionAssignment!]!
  allPositions(filter: PositionFilter, orderBy: PositionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Position!]!
  allPositionCategories(filter: PositionCategoryFilter, orderBy: PositionCategoryOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [PositionCategory!]!
  allPositionCategoryPreferences(filter: PositionCategoryPreferenceFilter, orderBy: PositionCategoryPreferenceOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [PositionCategoryPreference!]!
  allPosts(filter: PostFilter, orderBy: PostOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]!
  allSeasons(filter: SeasonFilter, orderBy: SeasonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Season!]!
  allSports(filter: SportFilter, orderBy: SportOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Sport!]!
  allSubstitutions(filter: SubstitutionFilter, orderBy: SubstitutionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Substitution!]!
  allTeams(filter: TeamFilter, orderBy: TeamOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Team!]!
  allTeamSeasons(filter: TeamSeasonFilter, orderBy: TeamSeasonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [TeamSeason!]!
  allUsers(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [User!]!
  _allFormationsMeta(filter: FormationFilter, orderBy: FormationOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allFormationSubstitutionsMeta(filter: FormationSubstitutionFilter, orderBy: FormationSubstitutionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allGamesMeta(filter: GameFilter, orderBy: GameOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allGameActivitiesMeta(filter: GameActivityFilter, orderBy: GameActivityOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allGameDefinitionsMeta(filter: GameDefinitionFilter, orderBy: GameDefinitionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allGamePeriodsMeta(filter: GamePeriodFilter, orderBy: GamePeriodOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allGamePlansMeta(filter: GamePlanFilter, orderBy: GamePlanOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allGamePlayersMeta(filter: GamePlayerFilter, orderBy: GamePlayerOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allGameTeamSeasonsMeta(filter: GameTeamSeasonFilter, orderBy: GameTeamSeasonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allLeaguesMeta(filter: LeagueFilter, orderBy: LeagueOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allLeagueSeasonsMeta(filter: LeagueSeasonFilter, orderBy: LeagueSeasonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allOrganizationsMeta(filter: OrganizationFilter, orderBy: OrganizationOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allPlayerPositionsMeta(filter: PlayerPositionFilter, orderBy: PlayerPositionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allPlayerPositionAssignmentsMeta(filter: PlayerPositionAssignmentFilter, orderBy: PlayerPositionAssignmentOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allPositionsMeta(filter: PositionFilter, orderBy: PositionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allPositionCategoriesMeta(filter: PositionCategoryFilter, orderBy: PositionCategoryOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allPositionCategoryPreferencesMeta(filter: PositionCategoryPreferenceFilter, orderBy: PositionCategoryPreferenceOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allPostsMeta(filter: PostFilter, orderBy: PostOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allSeasonsMeta(filter: SeasonFilter, orderBy: SeasonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allSportsMeta(filter: SportFilter, orderBy: SportOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allSubstitutionsMeta(filter: SubstitutionFilter, orderBy: SubstitutionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allTeamsMeta(filter: TeamFilter, orderBy: TeamOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allTeamSeasonsMeta(filter: TeamSeasonFilter, orderBy: TeamSeasonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allUsersMeta(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  Formation(id: ID): Formation
  FormationSubstitution(id: ID): FormationSubstitution
  Game(id: ID): Game
  GameActivity(id: ID): GameActivity
  GameDefinition(id: ID): GameDefinition
  GamePeriod(id: ID): GamePeriod
  GamePlan(id: ID): GamePlan
  GamePlayer(id: ID): GamePlayer
  GameTeamSeason(id: ID): GameTeamSeason
  League(id: ID): League
  LeagueSeason(id: ID): LeagueSeason
  Organization(id: ID): Organization
  PlayerPosition(id: ID): PlayerPosition
  PlayerPositionAssignment(id: ID): PlayerPositionAssignment
  Position(id: ID): Position
  PositionCategory(id: ID): PositionCategory
  PositionCategoryPreference(id: ID): PositionCategoryPreference
  Post(id: ID): Post
  Season(id: ID): Season
  Sport(id: ID): Sport
  Substitution(id: ID): Substitution
  Team(id: ID): Team
  TeamSeason(id: ID): TeamSeason
  User(id: ID): User

  """hello"""
  hello(name: String): HelloPayload
  user: User

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type RemoveFromChildrenParentsGuardiansPayload {
  childrenUser: User
  parentsGuardiansUser: User
}

type RemoveFromFormationsPositionsPayload {
  formationsFormation: Formation
  positionsPosition: Position
}

type RemoveFromGameDefinitionsGamePeriodsPayload {
  gamePeriodsGamePeriod: GamePeriod
  gameDefinitionsGameDefinition: GameDefinition
}

type RemoveFromGamePeriodOnGameActivityPayload {
  gamePeriodGamePeriod: GamePeriod
  gameActivitiesGameActivity: GameActivity
}

type RemoveFromGamePlanOnGameTeamSeasonPayload {
  gamePlanGamePlan: GamePlan
  gameTeamSeasonsGameTeamSeason: GameTeamSeason
}

type RemoveFromGameTeamSeasonOnFormationSubstitutionPayload {
  formationSubstitutionsFormationSubstitution: FormationSubstitution
  gameTeamSeasonGameTeamSeason: GameTeamSeason
}

type RemoveFromGameTeamSeasonOnSubstitutionPayload {
  substitutionsSubstitution: Substitution
  gameTeamSeasonGameTeamSeason: GameTeamSeason
}

type RemoveFromLeagueOnTeamPayload {
  leagueLeague: League
  teamsTeam: Team
}

type RemoveFromLeaguesSeasonsPayload {
  leaguesLeague: League
  seasonsSeason: Season
}

type RemoveFromPositionCategoryOnPositionPayload {
  positionCategoryPositionCategory: PositionCategory
  positionsPosition: Position
}

type RemoveFromPositionOnPlayerPositionPayload {
  positionPosition: Position
  playerPositionsPlayerPosition: PlayerPosition
}

type RemoveFromSportsOrganizationsPayload {
  sportsSport: Sport
  organizationsOrganization: Organization
}

type RemoveFromSubstitutionsPlayerPositionAssignmentsPayload {
  substitutionsSubstitution: Substitution
  playerPositionAssignmentsPlayerPositionAssignment: PlayerPositionAssignment
}

type RemoveFromTeamSeasonOnGameTeamSeasonPayload {
  teamSeasonTeamSeason: TeamSeason
  gameTeamSeasonsGameTeamSeason: GameTeamSeason
}

type RemoveFromTeamSeasonsCoachesPayload {
  coachesUser: User
  teamSeasonsAsCoachTeamSeason: TeamSeason
}

type RemoveFromTeamSeasonsParentsPayload {
  parentsUser: User
  teamSeasonsAsParentsTeamSeason: TeamSeason
}

type RemoveFromTeamSeasonsPlayersPayload {
  playersUser: User
  teamSeasonsAsPlayerTeamSeason: TeamSeason
}

type RemoveFromTeamsFansPayload {
  fansUser: User
  teamsAsFanTeam: Team
}

type Season implements Node {
  id: ID!
  leagues(filter: LeagueFilter, orderBy: LeagueOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [League!]
  leagueSeasons(filter: LeagueSeasonFilter, orderBy: LeagueSeasonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [LeagueSeason!]
  name: String!
  tags: [String!]
  timeOfYearSeason: TimeOfYearSeason
  year: Int

  """Meta information about the query."""
  _leaguesMeta(filter: LeagueFilter, orderBy: LeagueOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  """Meta information about the query."""
  _leagueSeasonsMeta(filter: LeagueSeasonFilter, orderBy: LeagueSeasonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

input SeasonFilter {
  """Logical AND on all given filters."""
  AND: [SeasonFilter!]

  """Logical OR on all given filters."""
  OR: [SeasonFilter!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  timeOfYearSeason: TimeOfYearSeason

  """All values that are not equal to given value."""
  timeOfYearSeason_not: TimeOfYearSeason

  """All values that are contained in given list."""
  timeOfYearSeason_in: [TimeOfYearSeason!]

  """All values that are not contained in given list."""
  timeOfYearSeason_not_in: [TimeOfYearSeason!]
  year: Int

  """All values that are not equal to given value."""
  year_not: Int

  """All values that are contained in given list."""
  year_in: [Int!]

  """All values that are not contained in given list."""
  year_not_in: [Int!]

  """All values less than the given value."""
  year_lt: Int

  """All values less than or equal the given value."""
  year_lte: Int

  """All values greater than the given value."""
  year_gt: Int

  """All values greater than or equal the given value."""
  year_gte: Int
  leagues_every: LeagueFilter
  leagues_some: LeagueFilter
  leagues_none: LeagueFilter
  leagueSeasons_every: LeagueSeasonFilter
  leagueSeasons_some: LeagueSeasonFilter
  leagueSeasons_none: LeagueSeasonFilter
}

input SeasonleagueSeasonsLeagueSeason {
  endDate: DateTime
  maximumBirthDate: DateTime
  minimumBirthDate: DateTime
  name: String!
  startDate: DateTime
  tags: [String!]
  leagueId: ID
  league: LeagueSeasonleagueLeague
  teamSeasonsIds: [ID!]
  teamSeasons: [LeagueSeasonteamSeasonsTeamSeason!]
}

input SeasonleaguesLeague {
  name: String!
  tags: [String!]
  gameDefinitionId: ID
  gameDefinition: LeaguegameDefinitionGameDefinition
  organizationId: ID
  organization: LeagueorganizationOrganization
  sportId: ID
  sport: LeaguesportSport
  leagueSeasonsIds: [ID!]
  leagueSeasons: [LeagueleagueSeasonsLeagueSeason!]
  seasonsIds: [ID!]
  seasons: [LeagueseasonsSeason!]
  teamsIds: [ID!]
  teams: [LeagueteamsTeam!]
}

enum SeasonOrderBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  timeOfYearSeason_ASC
  timeOfYearSeason_DESC
  year_ASC
  year_DESC
}

type SeasonPreviousValues {
  id: ID!
  name: String!
  tags: [String!]
  timeOfYearSeason: TimeOfYearSeason
  year: Int
}

input SeasonSubscriptionFilter {
  """Logical AND on all given filters."""
  AND: [SeasonSubscriptionFilter!]

  """Logical OR on all given filters."""
  OR: [SeasonSubscriptionFilter!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [_ModelMutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SeasonSubscriptionFilterNode
}

input SeasonSubscriptionFilterNode {
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  timeOfYearSeason: TimeOfYearSeason

  """All values that are not equal to given value."""
  timeOfYearSeason_not: TimeOfYearSeason

  """All values that are contained in given list."""
  timeOfYearSeason_in: [TimeOfYearSeason!]

  """All values that are not contained in given list."""
  timeOfYearSeason_not_in: [TimeOfYearSeason!]
  year: Int

  """All values that are not equal to given value."""
  year_not: Int

  """All values that are contained in given list."""
  year_in: [Int!]

  """All values that are not contained in given list."""
  year_not_in: [Int!]

  """All values less than the given value."""
  year_lt: Int

  """All values less than or equal the given value."""
  year_lte: Int

  """All values greater than the given value."""
  year_gt: Int

  """All values greater than or equal the given value."""
  year_gte: Int
  leagues_every: LeagueFilter
  leagues_some: LeagueFilter
  leagues_none: LeagueFilter
  leagueSeasons_every: LeagueSeasonFilter
  leagueSeasons_some: LeagueSeasonFilter
  leagueSeasons_none: LeagueSeasonFilter
}

type SeasonSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Season
  updatedFields: [String!]
  previousValues: SeasonPreviousValues
}

type Sport implements Node {
  id: ID!
  leagues(filter: LeagueFilter, orderBy: LeagueOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [League!]
  name: String!
  organizations(filter: OrganizationFilter, orderBy: OrganizationOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Organization!]
  tags: [String!]

  """Meta information about the query."""
  _leaguesMeta(filter: LeagueFilter, orderBy: LeagueOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  """Meta information about the query."""
  _organizationsMeta(filter: OrganizationFilter, orderBy: OrganizationOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

input SportFilter {
  """Logical AND on all given filters."""
  AND: [SportFilter!]

  """Logical OR on all given filters."""
  OR: [SportFilter!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  leagues_every: LeagueFilter
  leagues_some: LeagueFilter
  leagues_none: LeagueFilter
  organizations_every: OrganizationFilter
  organizations_some: OrganizationFilter
  organizations_none: OrganizationFilter
}

input SportleaguesLeague {
  name: String!
  tags: [String!]
  gameDefinitionId: ID
  gameDefinition: LeaguegameDefinitionGameDefinition
  organizationId: ID
  organization: LeagueorganizationOrganization
  leagueSeasonsIds: [ID!]
  leagueSeasons: [LeagueleagueSeasonsLeagueSeason!]
  seasonsIds: [ID!]
  seasons: [LeagueseasonsSeason!]
  teamsIds: [ID!]
  teams: [LeagueteamsTeam!]
}

enum SportOrderBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

input SportorganizationsOrganization {
  location: String
  name: String!
  tags: [String!]
  leaguesIds: [ID!]
  leagues: [OrganizationleaguesLeague!]
  sportsIds: [ID!]
  sports: [OrganizationsportsSport!]
}

type SportPreviousValues {
  id: ID!
  name: String!
  tags: [String!]
}

input SportSubscriptionFilter {
  """Logical AND on all given filters."""
  AND: [SportSubscriptionFilter!]

  """Logical OR on all given filters."""
  OR: [SportSubscriptionFilter!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [_ModelMutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SportSubscriptionFilterNode
}

input SportSubscriptionFilterNode {
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  leagues_every: LeagueFilter
  leagues_some: LeagueFilter
  leagues_none: LeagueFilter
  organizations_every: OrganizationFilter
  organizations_some: OrganizationFilter
  organizations_none: OrganizationFilter
}

type SportSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Sport
  updatedFields: [String!]
  previousValues: SportPreviousValues
}

type Subscription {
  Formation(filter: FormationSubscriptionFilter): FormationSubscriptionPayload
  FormationSubstitution(filter: FormationSubstitutionSubscriptionFilter): FormationSubstitutionSubscriptionPayload
  Game(filter: GameSubscriptionFilter): GameSubscriptionPayload
  GameActivity(filter: GameActivitySubscriptionFilter): GameActivitySubscriptionPayload
  GameDefinition(filter: GameDefinitionSubscriptionFilter): GameDefinitionSubscriptionPayload
  GamePeriod(filter: GamePeriodSubscriptionFilter): GamePeriodSubscriptionPayload
  GamePlan(filter: GamePlanSubscriptionFilter): GamePlanSubscriptionPayload
  GamePlayer(filter: GamePlayerSubscriptionFilter): GamePlayerSubscriptionPayload
  GameTeamSeason(filter: GameTeamSeasonSubscriptionFilter): GameTeamSeasonSubscriptionPayload
  League(filter: LeagueSubscriptionFilter): LeagueSubscriptionPayload
  LeagueSeason(filter: LeagueSeasonSubscriptionFilter): LeagueSeasonSubscriptionPayload
  Organization(filter: OrganizationSubscriptionFilter): OrganizationSubscriptionPayload
  PlayerPosition(filter: PlayerPositionSubscriptionFilter): PlayerPositionSubscriptionPayload
  PlayerPositionAssignment(filter: PlayerPositionAssignmentSubscriptionFilter): PlayerPositionAssignmentSubscriptionPayload
  Position(filter: PositionSubscriptionFilter): PositionSubscriptionPayload
  PositionCategory(filter: PositionCategorySubscriptionFilter): PositionCategorySubscriptionPayload
  PositionCategoryPreference(filter: PositionCategoryPreferenceSubscriptionFilter): PositionCategoryPreferenceSubscriptionPayload
  Post(filter: PostSubscriptionFilter): PostSubscriptionPayload
  Season(filter: SeasonSubscriptionFilter): SeasonSubscriptionPayload
  Sport(filter: SportSubscriptionFilter): SportSubscriptionPayload
  Substitution(filter: SubstitutionSubscriptionFilter): SubstitutionSubscriptionPayload
  Team(filter: TeamSubscriptionFilter): TeamSubscriptionPayload
  TeamSeason(filter: TeamSeasonSubscriptionFilter): TeamSeasonSubscriptionPayload
  User(filter: UserSubscriptionFilter): UserSubscriptionPayload
}

type Substitution implements Node {
  gameActivityStatus: GameActivityStatus!
  gameActivityType: GameActivityType!
  gameSeconds: Int
  gameTeamSeason(filter: GameTeamSeasonFilter): GameTeamSeason
  id: ID!
  playerPositionAssignments(filter: PlayerPositionAssignmentFilter, orderBy: PlayerPositionAssignmentOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [PlayerPositionAssignment!]
  timestamp: DateTime
  totalSeconds: Int

  """Meta information about the query."""
  _playerPositionAssignmentsMeta(filter: PlayerPositionAssignmentFilter, orderBy: PlayerPositionAssignmentOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

input SubstitutionFilter {
  """Logical AND on all given filters."""
  AND: [SubstitutionFilter!]

  """Logical OR on all given filters."""
  OR: [SubstitutionFilter!]
  gameActivityStatus: GameActivityStatus

  """All values that are not equal to given value."""
  gameActivityStatus_not: GameActivityStatus

  """All values that are contained in given list."""
  gameActivityStatus_in: [GameActivityStatus!]

  """All values that are not contained in given list."""
  gameActivityStatus_not_in: [GameActivityStatus!]
  gameActivityType: GameActivityType

  """All values that are not equal to given value."""
  gameActivityType_not: GameActivityType

  """All values that are contained in given list."""
  gameActivityType_in: [GameActivityType!]

  """All values that are not contained in given list."""
  gameActivityType_not_in: [GameActivityType!]
  gameSeconds: Int

  """All values that are not equal to given value."""
  gameSeconds_not: Int

  """All values that are contained in given list."""
  gameSeconds_in: [Int!]

  """All values that are not contained in given list."""
  gameSeconds_not_in: [Int!]

  """All values less than the given value."""
  gameSeconds_lt: Int

  """All values less than or equal the given value."""
  gameSeconds_lte: Int

  """All values greater than the given value."""
  gameSeconds_gt: Int

  """All values greater than or equal the given value."""
  gameSeconds_gte: Int
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  timestamp: DateTime

  """All values that are not equal to given value."""
  timestamp_not: DateTime

  """All values that are contained in given list."""
  timestamp_in: [DateTime!]

  """All values that are not contained in given list."""
  timestamp_not_in: [DateTime!]

  """All values less than the given value."""
  timestamp_lt: DateTime

  """All values less than or equal the given value."""
  timestamp_lte: DateTime

  """All values greater than the given value."""
  timestamp_gt: DateTime

  """All values greater than or equal the given value."""
  timestamp_gte: DateTime
  totalSeconds: Int

  """All values that are not equal to given value."""
  totalSeconds_not: Int

  """All values that are contained in given list."""
  totalSeconds_in: [Int!]

  """All values that are not contained in given list."""
  totalSeconds_not_in: [Int!]

  """All values less than the given value."""
  totalSeconds_lt: Int

  """All values less than or equal the given value."""
  totalSeconds_lte: Int

  """All values greater than the given value."""
  totalSeconds_gt: Int

  """All values greater than or equal the given value."""
  totalSeconds_gte: Int
  gameTeamSeason: GameTeamSeasonFilter
  playerPositionAssignments_every: PlayerPositionAssignmentFilter
  playerPositionAssignments_some: PlayerPositionAssignmentFilter
  playerPositionAssignments_none: PlayerPositionAssignmentFilter
}

input SubstitutiongameTeamSeasonGameTeamSeason {
  isHomeTeam: Boolean
  name: String!
  gameId: ID
  game: GameTeamSeasongameGame
  gamePlanId: ID
  gamePlan: GameTeamSeasongamePlanGamePlan
  teamSeasonId: ID
  teamSeason: GameTeamSeasonteamSeasonTeamSeason
  formationSubstitutionsIds: [ID!]
  formationSubstitutions: [GameTeamSeasonformationSubstitutionsFormationSubstitution!]
  gamePlayersIds: [ID!]
  gamePlayers: [GameTeamSeasongamePlayersGamePlayer!]
  substitutionsIds: [ID!]
  substitutions: [GameTeamSeasonsubstitutionsSubstitution!]
}

enum SubstitutionOrderBy {
  gameActivityStatus_ASC
  gameActivityStatus_DESC
  gameActivityType_ASC
  gameActivityType_DESC
  gameSeconds_ASC
  gameSeconds_DESC
  id_ASC
  id_DESC
  timestamp_ASC
  timestamp_DESC
  totalSeconds_ASC
  totalSeconds_DESC
}

input SubstitutionplayerPositionAssignmentsPlayerPositionAssignment {
  playerPositionAssignmentType: PlayerPositionAssignmentType
  timestamp: DateTime
  playerPositionId: ID
  playerPosition: PlayerPositionAssignmentplayerPositionPlayerPosition
  substitutionsIds: [ID!]
  substitutions: [PlayerPositionAssignmentsubstitutionsSubstitution!]
}

type SubstitutionPreviousValues {
  gameActivityStatus: GameActivityStatus!
  gameActivityType: GameActivityType!
  gameSeconds: Int
  id: ID!
  timestamp: DateTime
  totalSeconds: Int
}

input SubstitutionSubscriptionFilter {
  """Logical AND on all given filters."""
  AND: [SubstitutionSubscriptionFilter!]

  """Logical OR on all given filters."""
  OR: [SubstitutionSubscriptionFilter!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [_ModelMutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SubstitutionSubscriptionFilterNode
}

input SubstitutionSubscriptionFilterNode {
  gameActivityStatus: GameActivityStatus

  """All values that are not equal to given value."""
  gameActivityStatus_not: GameActivityStatus

  """All values that are contained in given list."""
  gameActivityStatus_in: [GameActivityStatus!]

  """All values that are not contained in given list."""
  gameActivityStatus_not_in: [GameActivityStatus!]
  gameActivityType: GameActivityType

  """All values that are not equal to given value."""
  gameActivityType_not: GameActivityType

  """All values that are contained in given list."""
  gameActivityType_in: [GameActivityType!]

  """All values that are not contained in given list."""
  gameActivityType_not_in: [GameActivityType!]
  gameSeconds: Int

  """All values that are not equal to given value."""
  gameSeconds_not: Int

  """All values that are contained in given list."""
  gameSeconds_in: [Int!]

  """All values that are not contained in given list."""
  gameSeconds_not_in: [Int!]

  """All values less than the given value."""
  gameSeconds_lt: Int

  """All values less than or equal the given value."""
  gameSeconds_lte: Int

  """All values greater than the given value."""
  gameSeconds_gt: Int

  """All values greater than or equal the given value."""
  gameSeconds_gte: Int
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  timestamp: DateTime

  """All values that are not equal to given value."""
  timestamp_not: DateTime

  """All values that are contained in given list."""
  timestamp_in: [DateTime!]

  """All values that are not contained in given list."""
  timestamp_not_in: [DateTime!]

  """All values less than the given value."""
  timestamp_lt: DateTime

  """All values less than or equal the given value."""
  timestamp_lte: DateTime

  """All values greater than the given value."""
  timestamp_gt: DateTime

  """All values greater than or equal the given value."""
  timestamp_gte: DateTime
  totalSeconds: Int

  """All values that are not equal to given value."""
  totalSeconds_not: Int

  """All values that are contained in given list."""
  totalSeconds_in: [Int!]

  """All values that are not contained in given list."""
  totalSeconds_not_in: [Int!]

  """All values less than the given value."""
  totalSeconds_lt: Int

  """All values less than or equal the given value."""
  totalSeconds_lte: Int

  """All values greater than the given value."""
  totalSeconds_gt: Int

  """All values greater than or equal the given value."""
  totalSeconds_gte: Int
  gameTeamSeason: GameTeamSeasonFilter
  playerPositionAssignments_every: PlayerPositionAssignmentFilter
  playerPositionAssignments_some: PlayerPositionAssignmentFilter
  playerPositionAssignments_none: PlayerPositionAssignmentFilter
}

type SubstitutionSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Substitution
  updatedFields: [String!]
  previousValues: SubstitutionPreviousValues
}

type Team implements Node {
  fans(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  id: ID!
  league(filter: LeagueFilter): League
  name: String!
  tags: [String!]
  teamSeasons(filter: TeamSeasonFilter, orderBy: TeamSeasonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [TeamSeason!]

  """Meta information about the query."""
  _fansMeta(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  """Meta information about the query."""
  _teamSeasonsMeta(filter: TeamSeasonFilter, orderBy: TeamSeasonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

input TeamfansUser {
  dateOfBirth: DateTime
  gender: Gender
  name: String
  childrenIds: [ID!]
  children: [UserchildrenUser!]
  gamePlayersIds: [ID!]
  gamePlayers: [UsergamePlayersGamePlayer!]
  parentsGuardiansIds: [ID!]
  parentsGuardians: [UserchildrenUser!]
  playerPositionsIds: [ID!]
  playerPositions: [UserplayerPositionsPlayerPosition!]
  positionCategoryPreferencesAsPlayerIds: [ID!]
  positionCategoryPreferencesAsPlayer: [UserpositionCategoryPreferencesAsPlayerPositionCategoryPreference!]
  positionCategoryPreferencesAsPrefererIds: [ID!]
  positionCategoryPreferencesAsPreferer: [UserpositionCategoryPreferencesAsPrefererPositionCategoryPreference!]
  postsIds: [ID!]
  posts: [UserpostsPost!]
  teamsAsFanIds: [ID!]
  teamsAsFan: [UserteamsAsFanTeam!]
  teamSeasonsAsCoachIds: [ID!]
  teamSeasonsAsCoach: [UserteamSeasonsAsCoachTeamSeason!]
  teamSeasonsAsParentsIds: [ID!]
  teamSeasonsAsParents: [UserteamSeasonsAsParentsTeamSeason!]
  teamSeasonsAsPlayerIds: [ID!]
  teamSeasonsAsPlayer: [UserteamSeasonsAsPlayerTeamSeason!]
}

input TeamFilter {
  """Logical AND on all given filters."""
  AND: [TeamFilter!]

  """Logical OR on all given filters."""
  OR: [TeamFilter!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  fans_every: UserFilter
  fans_some: UserFilter
  fans_none: UserFilter
  league: LeagueFilter
  teamSeasons_every: TeamSeasonFilter
  teamSeasons_some: TeamSeasonFilter
  teamSeasons_none: TeamSeasonFilter
}

input TeamleagueLeague {
  name: String!
  tags: [String!]
  gameDefinitionId: ID
  gameDefinition: LeaguegameDefinitionGameDefinition
  organizationId: ID
  organization: LeagueorganizationOrganization
  sportId: ID
  sport: LeaguesportSport
  leagueSeasonsIds: [ID!]
  leagueSeasons: [LeagueleagueSeasonsLeagueSeason!]
  seasonsIds: [ID!]
  seasons: [LeagueseasonsSeason!]
  teamsIds: [ID!]
  teams: [LeagueteamsTeam!]
}

enum TeamOrderBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type TeamPreviousValues {
  id: ID!
  name: String!
  tags: [String!]
}

type TeamSeason implements Node {
  coaches(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  gameTeamSeasons(filter: GameTeamSeasonFilter, orderBy: GameTeamSeasonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [GameTeamSeason!]
  id: ID!
  leagueSeason(filter: LeagueSeasonFilter): LeagueSeason!
  name: String!
  parents(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  players(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  tags: [String!]
  team(filter: TeamFilter): Team!

  """Meta information about the query."""
  _coachesMeta(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  """Meta information about the query."""
  _gameTeamSeasonsMeta(filter: GameTeamSeasonFilter, orderBy: GameTeamSeasonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  """Meta information about the query."""
  _parentsMeta(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  """Meta information about the query."""
  _playersMeta(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

input TeamSeasoncoachesUser {
  dateOfBirth: DateTime
  gender: Gender
  name: String
  childrenIds: [ID!]
  children: [UserchildrenUser!]
  gamePlayersIds: [ID!]
  gamePlayers: [UsergamePlayersGamePlayer!]
  parentsGuardiansIds: [ID!]
  parentsGuardians: [UserchildrenUser!]
  playerPositionsIds: [ID!]
  playerPositions: [UserplayerPositionsPlayerPosition!]
  positionCategoryPreferencesAsPlayerIds: [ID!]
  positionCategoryPreferencesAsPlayer: [UserpositionCategoryPreferencesAsPlayerPositionCategoryPreference!]
  positionCategoryPreferencesAsPrefererIds: [ID!]
  positionCategoryPreferencesAsPreferer: [UserpositionCategoryPreferencesAsPrefererPositionCategoryPreference!]
  postsIds: [ID!]
  posts: [UserpostsPost!]
  teamsAsFanIds: [ID!]
  teamsAsFan: [UserteamsAsFanTeam!]
  teamSeasonsAsCoachIds: [ID!]
  teamSeasonsAsCoach: [UserteamSeasonsAsCoachTeamSeason!]
  teamSeasonsAsParentsIds: [ID!]
  teamSeasonsAsParents: [UserteamSeasonsAsParentsTeamSeason!]
  teamSeasonsAsPlayerIds: [ID!]
  teamSeasonsAsPlayer: [UserteamSeasonsAsPlayerTeamSeason!]
}

input TeamSeasonFilter {
  """Logical AND on all given filters."""
  AND: [TeamSeasonFilter!]

  """Logical OR on all given filters."""
  OR: [TeamSeasonFilter!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  coaches_every: UserFilter
  coaches_some: UserFilter
  coaches_none: UserFilter
  gameTeamSeasons_every: GameTeamSeasonFilter
  gameTeamSeasons_some: GameTeamSeasonFilter
  gameTeamSeasons_none: GameTeamSeasonFilter
  leagueSeason: LeagueSeasonFilter
  parents_every: UserFilter
  parents_some: UserFilter
  parents_none: UserFilter
  players_every: UserFilter
  players_some: UserFilter
  players_none: UserFilter
  team: TeamFilter
}

input TeamSeasongameTeamSeasonsGameTeamSeason {
  isHomeTeam: Boolean
  name: String!
  gameId: ID
  game: GameTeamSeasongameGame
  gamePlanId: ID
  gamePlan: GameTeamSeasongamePlanGamePlan
  formationSubstitutionsIds: [ID!]
  formationSubstitutions: [GameTeamSeasonformationSubstitutionsFormationSubstitution!]
  gamePlayersIds: [ID!]
  gamePlayers: [GameTeamSeasongamePlayersGamePlayer!]
  substitutionsIds: [ID!]
  substitutions: [GameTeamSeasonsubstitutionsSubstitution!]
}

input TeamSeasonleagueSeasonLeagueSeason {
  endDate: DateTime
  maximumBirthDate: DateTime
  minimumBirthDate: DateTime
  name: String!
  startDate: DateTime
  tags: [String!]
  leagueId: ID
  league: LeagueSeasonleagueLeague
  seasonId: ID
  season: LeagueSeasonseasonSeason
  teamSeasonsIds: [ID!]
  teamSeasons: [LeagueSeasonteamSeasonsTeamSeason!]
}

enum TeamSeasonOrderBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

input TeamSeasonparentsUser {
  dateOfBirth: DateTime
  gender: Gender
  name: String
  childrenIds: [ID!]
  children: [UserchildrenUser!]
  gamePlayersIds: [ID!]
  gamePlayers: [UsergamePlayersGamePlayer!]
  parentsGuardiansIds: [ID!]
  parentsGuardians: [UserchildrenUser!]
  playerPositionsIds: [ID!]
  playerPositions: [UserplayerPositionsPlayerPosition!]
  positionCategoryPreferencesAsPlayerIds: [ID!]
  positionCategoryPreferencesAsPlayer: [UserpositionCategoryPreferencesAsPlayerPositionCategoryPreference!]
  positionCategoryPreferencesAsPrefererIds: [ID!]
  positionCategoryPreferencesAsPreferer: [UserpositionCategoryPreferencesAsPrefererPositionCategoryPreference!]
  postsIds: [ID!]
  posts: [UserpostsPost!]
  teamsAsFanIds: [ID!]
  teamsAsFan: [UserteamsAsFanTeam!]
  teamSeasonsAsCoachIds: [ID!]
  teamSeasonsAsCoach: [UserteamSeasonsAsCoachTeamSeason!]
  teamSeasonsAsParentsIds: [ID!]
  teamSeasonsAsParents: [UserteamSeasonsAsParentsTeamSeason!]
  teamSeasonsAsPlayerIds: [ID!]
  teamSeasonsAsPlayer: [UserteamSeasonsAsPlayerTeamSeason!]
}

input TeamSeasonplayersUser {
  dateOfBirth: DateTime
  gender: Gender
  name: String
  childrenIds: [ID!]
  children: [UserchildrenUser!]
  gamePlayersIds: [ID!]
  gamePlayers: [UsergamePlayersGamePlayer!]
  parentsGuardiansIds: [ID!]
  parentsGuardians: [UserchildrenUser!]
  playerPositionsIds: [ID!]
  playerPositions: [UserplayerPositionsPlayerPosition!]
  positionCategoryPreferencesAsPlayerIds: [ID!]
  positionCategoryPreferencesAsPlayer: [UserpositionCategoryPreferencesAsPlayerPositionCategoryPreference!]
  positionCategoryPreferencesAsPrefererIds: [ID!]
  positionCategoryPreferencesAsPreferer: [UserpositionCategoryPreferencesAsPrefererPositionCategoryPreference!]
  postsIds: [ID!]
  posts: [UserpostsPost!]
  teamsAsFanIds: [ID!]
  teamsAsFan: [UserteamsAsFanTeam!]
  teamSeasonsAsCoachIds: [ID!]
  teamSeasonsAsCoach: [UserteamSeasonsAsCoachTeamSeason!]
  teamSeasonsAsParentsIds: [ID!]
  teamSeasonsAsParents: [UserteamSeasonsAsParentsTeamSeason!]
  teamSeasonsAsPlayerIds: [ID!]
  teamSeasonsAsPlayer: [UserteamSeasonsAsPlayerTeamSeason!]
}

type TeamSeasonPreviousValues {
  id: ID!
  name: String!
  tags: [String!]
}

input TeamSeasonSubscriptionFilter {
  """Logical AND on all given filters."""
  AND: [TeamSeasonSubscriptionFilter!]

  """Logical OR on all given filters."""
  OR: [TeamSeasonSubscriptionFilter!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [_ModelMutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TeamSeasonSubscriptionFilterNode
}

input TeamSeasonSubscriptionFilterNode {
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  coaches_every: UserFilter
  coaches_some: UserFilter
  coaches_none: UserFilter
  gameTeamSeasons_every: GameTeamSeasonFilter
  gameTeamSeasons_some: GameTeamSeasonFilter
  gameTeamSeasons_none: GameTeamSeasonFilter
  leagueSeason: LeagueSeasonFilter
  parents_every: UserFilter
  parents_some: UserFilter
  parents_none: UserFilter
  players_every: UserFilter
  players_some: UserFilter
  players_none: UserFilter
  team: TeamFilter
}

type TeamSeasonSubscriptionPayload {
  mutation: _ModelMutationType!
  node: TeamSeason
  updatedFields: [String!]
  previousValues: TeamSeasonPreviousValues
}

input TeamSeasonteamTeam {
  name: String!
  tags: [String!]
  leagueId: ID
  league: TeamleagueLeague
  fansIds: [ID!]
  fans: [TeamfansUser!]
  teamSeasonsIds: [ID!]
  teamSeasons: [TeamteamSeasonsTeamSeason!]
}

input TeamSubscriptionFilter {
  """Logical AND on all given filters."""
  AND: [TeamSubscriptionFilter!]

  """Logical OR on all given filters."""
  OR: [TeamSubscriptionFilter!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [_ModelMutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TeamSubscriptionFilterNode
}

input TeamSubscriptionFilterNode {
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  fans_every: UserFilter
  fans_some: UserFilter
  fans_none: UserFilter
  league: LeagueFilter
  teamSeasons_every: TeamSeasonFilter
  teamSeasons_some: TeamSeasonFilter
  teamSeasons_none: TeamSeasonFilter
}

type TeamSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Team
  updatedFields: [String!]
  previousValues: TeamPreviousValues
}

input TeamteamSeasonsTeamSeason {
  name: String!
  tags: [String!]
  leagueSeasonId: ID
  leagueSeason: TeamSeasonleagueSeasonLeagueSeason
  coachesIds: [ID!]
  coaches: [TeamSeasoncoachesUser!]
  gameTeamSeasonsIds: [ID!]
  gameTeamSeasons: [TeamSeasongameTeamSeasonsGameTeamSeason!]
  parentsIds: [ID!]
  parents: [TeamSeasonparentsUser!]
  playersIds: [ID!]
  players: [TeamSeasonplayersUser!]
}

enum TimeOfYearSeason {
  SPRING
  SUMMER
  FALL
  WINTER
}

input UpdateFormation {
  formationCode: String
  id: ID!
  name: String
  formationSubstitutionIds: [ID!]
  formationSubstitution: [FormationformationSubstitutionFormationSubstitution!]
  positionsIds: [ID!]
  positions: [FormationpositionsPosition!]
}

input UpdateFormationSubstitution {
  gameActivityStatus: GameActivityStatus
  gameActivityType: GameActivityType
  gameSeconds: Int
  id: ID!
  timestamp: DateTime
  totalSeconds: Int
  formationId: ID
  formation: FormationSubstitutionformationFormation
  gameTeamSeasonId: ID
  gameTeamSeason: FormationSubstitutiongameTeamSeasonGameTeamSeason
}

input UpdateGame {
  gameStatus: GameStatus
  id: ID!
  location: String
  name: String
  scheduledStartTime: DateTime
  gameActivitiesIds: [ID!]
  gameActivities: [GamegameActivitiesGameActivity!]
  gameTeamSeasonsIds: [ID!]
  gameTeamSeasons: [GamegameTeamSeasonsGameTeamSeason!]
}

input UpdateGameActivity {
  gameActivityStatus: GameActivityStatus
  gameActivityType: GameActivityType
  gameSeconds: Int
  id: ID!
  name: String
  timestamp: DateTime
  totalSeconds: Int
  gameId: ID
  game: GameActivitygameGame
  gamePeriodId: ID
  gamePeriod: GameActivitygamePeriodGamePeriod
}

input UpdateGameDefinition {
  betweenGamesSeconds: Int
  id: ID!
  includeGoalies: Boolean
  maximumDurationSeconds: Int
  name: String
  numberOfReferees: Int
  numberPlayersPerSide: Int
  numberSimultaneousGames: Int
  typicalDurationSeconds: Int
  gamePeriodsIds: [ID!]
  gamePeriods: [GameDefinitiongamePeriodsGamePeriod!]
  leaguesIds: [ID!]
  leagues: [GameDefinitionleaguesLeague!]
}

input UpdateGamePeriod {
  durationSeconds: Int
  gamePeriodType: GamePeriodType
  id: ID!
  name: String
  postDurationSeconds: Int
  gameActivitiesIds: [ID!]
  gameActivities: [GamePeriodgameActivitiesGameActivity!]
  gameDefinitionsIds: [ID!]
  gameDefinitions: [GamePeriodgameDefinitionsGameDefinition!]
}

input UpdateGamePlan {
  id: ID!
  minimumGameTimePercentage: Int
  secondsBetweenSubs: Int
  gameTeamSeasonsIds: [ID!]
  gameTeamSeasons: [GamePlangameTeamSeasonsGameTeamSeason!]
}

input UpdateGamePlayer {
  availability: Availability
  id: ID!
  gameTeamSeasonId: ID
  gameTeamSeason: GamePlayergameTeamSeasonGameTeamSeason
  playerId: ID
  player: GamePlayerplayerUser
}

input UpdateGameTeamSeason {
  id: ID!
  isHomeTeam: Boolean
  name: String
  gameId: ID
  game: GameTeamSeasongameGame
  gamePlanId: ID
  gamePlan: GameTeamSeasongamePlanGamePlan
  teamSeasonId: ID
  teamSeason: GameTeamSeasonteamSeasonTeamSeason
  formationSubstitutionsIds: [ID!]
  formationSubstitutions: [GameTeamSeasonformationSubstitutionsFormationSubstitution!]
  gamePlayersIds: [ID!]
  gamePlayers: [GameTeamSeasongamePlayersGamePlayer!]
  substitutionsIds: [ID!]
  substitutions: [GameTeamSeasonsubstitutionsSubstitution!]
}

input UpdateLeague {
  id: ID!
  name: String
  tags: [String!]
  gameDefinitionId: ID
  gameDefinition: LeaguegameDefinitionGameDefinition
  organizationId: ID
  organization: LeagueorganizationOrganization
  sportId: ID
  sport: LeaguesportSport
  leagueSeasonsIds: [ID!]
  leagueSeasons: [LeagueleagueSeasonsLeagueSeason!]
  seasonsIds: [ID!]
  seasons: [LeagueseasonsSeason!]
  teamsIds: [ID!]
  teams: [LeagueteamsTeam!]
}

input UpdateLeagueSeason {
  endDate: DateTime
  id: ID!
  maximumBirthDate: DateTime
  minimumBirthDate: DateTime
  name: String
  startDate: DateTime
  tags: [String!]
  leagueId: ID
  league: LeagueSeasonleagueLeague
  seasonId: ID
  season: LeagueSeasonseasonSeason
  teamSeasonsIds: [ID!]
  teamSeasons: [LeagueSeasonteamSeasonsTeamSeason!]
}

input UpdateOrganization {
  id: ID!
  location: String
  name: String
  tags: [String!]
  leaguesIds: [ID!]
  leagues: [OrganizationleaguesLeague!]
  sportsIds: [ID!]
  sports: [OrganizationsportsSport!]
}

input UpdatePlayerPosition {
  id: ID!
  playerId: ID
  player: PlayerPositionplayerUser
  positionId: ID
  position: PlayerPositionpositionPosition
  playerPositionAssignmentsIds: [ID!]
  playerPositionAssignments: [PlayerPositionplayerPositionAssignmentsPlayerPositionAssignment!]
}

input UpdatePlayerPositionAssignment {
  id: ID!
  playerPositionAssignmentType: PlayerPositionAssignmentType
  timestamp: DateTime
  playerPositionId: ID
  playerPosition: PlayerPositionAssignmentplayerPositionPlayerPosition
  substitutionsIds: [ID!]
  substitutions: [PlayerPositionAssignmentsubstitutionsSubstitution!]
}

input UpdatePosition {
  id: ID!
  lateralLocation: LateralLocation
  leftToRightPercent: Float
  name: String
  positionCategoryId: ID
  positionCategory: PositionpositionCategoryPositionCategory
  formationsIds: [ID!]
  formations: [PositionformationsFormation!]
  playerPositionsIds: [ID!]
  playerPositions: [PositionplayerPositionsPlayerPosition!]
}

input UpdatePositionCategory {
  color: String
  id: ID!
  name: String
  parkLocation: ParkLocation
  pitchLocation: PitchLocation
  positionCategoryPreferencesIds: [ID!]
  positionCategoryPreferences: [PositionCategorypositionCategoryPreferencesPositionCategoryPreference!]
  positionsIds: [ID!]
  positions: [PositionCategorypositionsPosition!]
}

input UpdatePositionCategoryPreference {
  id: ID!
  playerId: ID
  player: PositionCategoryPreferenceplayerUser
  positionCategoryId: ID
  positionCategory: PositionCategoryPreferencepositionCategoryPositionCategory
  prefererId: ID
  preferer: PositionCategoryPreferenceprefererUser
}

input UpdatePost {
  id: ID!
  title: String
  authorId: ID
  author: PostauthorUser
}

input UpdateSeason {
  id: ID!
  name: String
  tags: [String!]
  timeOfYearSeason: TimeOfYearSeason
  year: Int
  leaguesIds: [ID!]
  leagues: [SeasonleaguesLeague!]
  leagueSeasonsIds: [ID!]
  leagueSeasons: [SeasonleagueSeasonsLeagueSeason!]
}

input UpdateSport {
  id: ID!
  name: String
  tags: [String!]
  leaguesIds: [ID!]
  leagues: [SportleaguesLeague!]
  organizationsIds: [ID!]
  organizations: [SportorganizationsOrganization!]
}

input UpdateSubstitution {
  gameActivityStatus: GameActivityStatus
  gameActivityType: GameActivityType
  gameSeconds: Int
  id: ID!
  timestamp: DateTime
  totalSeconds: Int
  gameTeamSeasonId: ID
  gameTeamSeason: SubstitutiongameTeamSeasonGameTeamSeason
  playerPositionAssignmentsIds: [ID!]
  playerPositionAssignments: [SubstitutionplayerPositionAssignmentsPlayerPositionAssignment!]
}

input UpdateTeam {
  id: ID!
  name: String
  tags: [String!]
  leagueId: ID
  league: TeamleagueLeague
  fansIds: [ID!]
  fans: [TeamfansUser!]
  teamSeasonsIds: [ID!]
  teamSeasons: [TeamteamSeasonsTeamSeason!]
}

input UpdateTeamSeason {
  id: ID!
  name: String
  tags: [String!]
  leagueSeasonId: ID
  leagueSeason: TeamSeasonleagueSeasonLeagueSeason
  teamId: ID
  team: TeamSeasonteamTeam
  coachesIds: [ID!]
  coaches: [TeamSeasoncoachesUser!]
  gameTeamSeasonsIds: [ID!]
  gameTeamSeasons: [TeamSeasongameTeamSeasonsGameTeamSeason!]
  parentsIds: [ID!]
  parents: [TeamSeasonparentsUser!]
  playersIds: [ID!]
  players: [TeamSeasonplayersUser!]
}

input UpdateUser {
  dateOfBirth: DateTime
  gender: Gender
  id: ID!
  name: String
  childrenIds: [ID!]
  children: [UserchildrenUser!]
  gamePlayersIds: [ID!]
  gamePlayers: [UsergamePlayersGamePlayer!]
  parentsGuardiansIds: [ID!]
  parentsGuardians: [UserchildrenUser!]
  playerPositionsIds: [ID!]
  playerPositions: [UserplayerPositionsPlayerPosition!]
  positionCategoryPreferencesAsPlayerIds: [ID!]
  positionCategoryPreferencesAsPlayer: [UserpositionCategoryPreferencesAsPlayerPositionCategoryPreference!]
  positionCategoryPreferencesAsPrefererIds: [ID!]
  positionCategoryPreferencesAsPreferer: [UserpositionCategoryPreferencesAsPrefererPositionCategoryPreference!]
  postsIds: [ID!]
  posts: [UserpostsPost!]
  teamsAsFanIds: [ID!]
  teamsAsFan: [UserteamsAsFanTeam!]
  teamSeasonsAsCoachIds: [ID!]
  teamSeasonsAsCoach: [UserteamSeasonsAsCoachTeamSeason!]
  teamSeasonsAsParentsIds: [ID!]
  teamSeasonsAsParents: [UserteamSeasonsAsParentsTeamSeason!]
  teamSeasonsAsPlayerIds: [ID!]
  teamSeasonsAsPlayer: [UserteamSeasonsAsPlayerTeamSeason!]
}

type User implements Node {
  children(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  dateOfBirth: DateTime
  gamePlayers(filter: GamePlayerFilter, orderBy: GamePlayerOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [GamePlayer!]
  gender: Gender
  id: ID!
  name: String
  parentsGuardians(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  playerPositions(filter: PlayerPositionFilter, orderBy: PlayerPositionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [PlayerPosition!]
  positionCategoryPreferencesAsPlayer(filter: PositionCategoryPreferenceFilter, orderBy: PositionCategoryPreferenceOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [PositionCategoryPreference!]
  positionCategoryPreferencesAsPreferer(filter: PositionCategoryPreferenceFilter, orderBy: PositionCategoryPreferenceOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [PositionCategoryPreference!]
  posts(filter: PostFilter, orderBy: PostOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  teamsAsFan(filter: TeamFilter, orderBy: TeamOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Team!]
  teamSeasonsAsCoach(filter: TeamSeasonFilter, orderBy: TeamSeasonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [TeamSeason!]
  teamSeasonsAsParents(filter: TeamSeasonFilter, orderBy: TeamSeasonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [TeamSeason!]
  teamSeasonsAsPlayer(filter: TeamSeasonFilter, orderBy: TeamSeasonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [TeamSeason!]

  """Meta information about the query."""
  _childrenMeta(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  """Meta information about the query."""
  _gamePlayersMeta(filter: GamePlayerFilter, orderBy: GamePlayerOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  """Meta information about the query."""
  _parentsGuardiansMeta(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  """Meta information about the query."""
  _playerPositionsMeta(filter: PlayerPositionFilter, orderBy: PlayerPositionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  """Meta information about the query."""
  _positionCategoryPreferencesAsPlayerMeta(filter: PositionCategoryPreferenceFilter, orderBy: PositionCategoryPreferenceOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  """Meta information about the query."""
  _positionCategoryPreferencesAsPrefererMeta(filter: PositionCategoryPreferenceFilter, orderBy: PositionCategoryPreferenceOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  """Meta information about the query."""
  _postsMeta(filter: PostFilter, orderBy: PostOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  """Meta information about the query."""
  _teamsAsFanMeta(filter: TeamFilter, orderBy: TeamOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  """Meta information about the query."""
  _teamSeasonsAsCoachMeta(filter: TeamSeasonFilter, orderBy: TeamSeasonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  """Meta information about the query."""
  _teamSeasonsAsParentsMeta(filter: TeamSeasonFilter, orderBy: TeamSeasonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  """Meta information about the query."""
  _teamSeasonsAsPlayerMeta(filter: TeamSeasonFilter, orderBy: TeamSeasonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

input UserchildrenUser {
  dateOfBirth: DateTime
  gender: Gender
  name: String
  childrenIds: [ID!]
  children: [UserchildrenUser!]
  gamePlayersIds: [ID!]
  gamePlayers: [UsergamePlayersGamePlayer!]
  parentsGuardiansIds: [ID!]
  parentsGuardians: [UserchildrenUser!]
  playerPositionsIds: [ID!]
  playerPositions: [UserplayerPositionsPlayerPosition!]
  positionCategoryPreferencesAsPlayerIds: [ID!]
  positionCategoryPreferencesAsPlayer: [UserpositionCategoryPreferencesAsPlayerPositionCategoryPreference!]
  positionCategoryPreferencesAsPrefererIds: [ID!]
  positionCategoryPreferencesAsPreferer: [UserpositionCategoryPreferencesAsPrefererPositionCategoryPreference!]
  postsIds: [ID!]
  posts: [UserpostsPost!]
  teamsAsFanIds: [ID!]
  teamsAsFan: [UserteamsAsFanTeam!]
  teamSeasonsAsCoachIds: [ID!]
  teamSeasonsAsCoach: [UserteamSeasonsAsCoachTeamSeason!]
  teamSeasonsAsParentsIds: [ID!]
  teamSeasonsAsParents: [UserteamSeasonsAsParentsTeamSeason!]
  teamSeasonsAsPlayerIds: [ID!]
  teamSeasonsAsPlayer: [UserteamSeasonsAsPlayerTeamSeason!]
}

input UserFilter {
  """Logical AND on all given filters."""
  AND: [UserFilter!]

  """Logical OR on all given filters."""
  OR: [UserFilter!]
  dateOfBirth: DateTime

  """All values that are not equal to given value."""
  dateOfBirth_not: DateTime

  """All values that are contained in given list."""
  dateOfBirth_in: [DateTime!]

  """All values that are not contained in given list."""
  dateOfBirth_not_in: [DateTime!]

  """All values less than the given value."""
  dateOfBirth_lt: DateTime

  """All values less than or equal the given value."""
  dateOfBirth_lte: DateTime

  """All values greater than the given value."""
  dateOfBirth_gt: DateTime

  """All values greater than or equal the given value."""
  dateOfBirth_gte: DateTime
  gender: Gender

  """All values that are not equal to given value."""
  gender_not: Gender

  """All values that are contained in given list."""
  gender_in: [Gender!]

  """All values that are not contained in given list."""
  gender_not_in: [Gender!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  children_every: UserFilter
  children_some: UserFilter
  children_none: UserFilter
  gamePlayers_every: GamePlayerFilter
  gamePlayers_some: GamePlayerFilter
  gamePlayers_none: GamePlayerFilter
  parentsGuardians_every: UserFilter
  parentsGuardians_some: UserFilter
  parentsGuardians_none: UserFilter
  playerPositions_every: PlayerPositionFilter
  playerPositions_some: PlayerPositionFilter
  playerPositions_none: PlayerPositionFilter
  positionCategoryPreferencesAsPlayer_every: PositionCategoryPreferenceFilter
  positionCategoryPreferencesAsPlayer_some: PositionCategoryPreferenceFilter
  positionCategoryPreferencesAsPlayer_none: PositionCategoryPreferenceFilter
  positionCategoryPreferencesAsPreferer_every: PositionCategoryPreferenceFilter
  positionCategoryPreferencesAsPreferer_some: PositionCategoryPreferenceFilter
  positionCategoryPreferencesAsPreferer_none: PositionCategoryPreferenceFilter
  posts_every: PostFilter
  posts_some: PostFilter
  posts_none: PostFilter
  teamsAsFan_every: TeamFilter
  teamsAsFan_some: TeamFilter
  teamsAsFan_none: TeamFilter
  teamSeasonsAsCoach_every: TeamSeasonFilter
  teamSeasonsAsCoach_some: TeamSeasonFilter
  teamSeasonsAsCoach_none: TeamSeasonFilter
  teamSeasonsAsParents_every: TeamSeasonFilter
  teamSeasonsAsParents_some: TeamSeasonFilter
  teamSeasonsAsParents_none: TeamSeasonFilter
  teamSeasonsAsPlayer_every: TeamSeasonFilter
  teamSeasonsAsPlayer_some: TeamSeasonFilter
  teamSeasonsAsPlayer_none: TeamSeasonFilter
}

input UsergamePlayersGamePlayer {
  availability: Availability!
  gameTeamSeasonId: ID
  gameTeamSeason: GamePlayergameTeamSeasonGameTeamSeason
}

enum UserOrderBy {
  dateOfBirth_ASC
  dateOfBirth_DESC
  gender_ASC
  gender_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

input UserplayerPositionsPlayerPosition {
  positionId: ID
  position: PlayerPositionpositionPosition
  playerPositionAssignmentsIds: [ID!]
  playerPositionAssignments: [PlayerPositionplayerPositionAssignmentsPlayerPositionAssignment!]
}

input UserpositionCategoryPreferencesAsPlayerPositionCategoryPreference {
  positionCategoryId: ID
  positionCategory: PositionCategoryPreferencepositionCategoryPositionCategory
  prefererId: ID
  preferer: PositionCategoryPreferenceprefererUser
}

input UserpositionCategoryPreferencesAsPrefererPositionCategoryPreference {
  playerId: ID
  player: PositionCategoryPreferenceplayerUser
  positionCategoryId: ID
  positionCategory: PositionCategoryPreferencepositionCategoryPositionCategory
}

input UserpostsPost {
  title: String!
}

type UserPreviousValues {
  dateOfBirth: DateTime
  gender: Gender
  id: ID!
  name: String
}

input UserSubscriptionFilter {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionFilter!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionFilter!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [_ModelMutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserSubscriptionFilterNode
}

input UserSubscriptionFilterNode {
  dateOfBirth: DateTime

  """All values that are not equal to given value."""
  dateOfBirth_not: DateTime

  """All values that are contained in given list."""
  dateOfBirth_in: [DateTime!]

  """All values that are not contained in given list."""
  dateOfBirth_not_in: [DateTime!]

  """All values less than the given value."""
  dateOfBirth_lt: DateTime

  """All values less than or equal the given value."""
  dateOfBirth_lte: DateTime

  """All values greater than the given value."""
  dateOfBirth_gt: DateTime

  """All values greater than or equal the given value."""
  dateOfBirth_gte: DateTime
  gender: Gender

  """All values that are not equal to given value."""
  gender_not: Gender

  """All values that are contained in given list."""
  gender_in: [Gender!]

  """All values that are not contained in given list."""
  gender_not_in: [Gender!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  children_every: UserFilter
  children_some: UserFilter
  children_none: UserFilter
  gamePlayers_every: GamePlayerFilter
  gamePlayers_some: GamePlayerFilter
  gamePlayers_none: GamePlayerFilter
  parentsGuardians_every: UserFilter
  parentsGuardians_some: UserFilter
  parentsGuardians_none: UserFilter
  playerPositions_every: PlayerPositionFilter
  playerPositions_some: PlayerPositionFilter
  playerPositions_none: PlayerPositionFilter
  positionCategoryPreferencesAsPlayer_every: PositionCategoryPreferenceFilter
  positionCategoryPreferencesAsPlayer_some: PositionCategoryPreferenceFilter
  positionCategoryPreferencesAsPlayer_none: PositionCategoryPreferenceFilter
  positionCategoryPreferencesAsPreferer_every: PositionCategoryPreferenceFilter
  positionCategoryPreferencesAsPreferer_some: PositionCategoryPreferenceFilter
  positionCategoryPreferencesAsPreferer_none: PositionCategoryPreferenceFilter
  posts_every: PostFilter
  posts_some: PostFilter
  posts_none: PostFilter
  teamsAsFan_every: TeamFilter
  teamsAsFan_some: TeamFilter
  teamsAsFan_none: TeamFilter
  teamSeasonsAsCoach_every: TeamSeasonFilter
  teamSeasonsAsCoach_some: TeamSeasonFilter
  teamSeasonsAsCoach_none: TeamSeasonFilter
  teamSeasonsAsParents_every: TeamSeasonFilter
  teamSeasonsAsParents_some: TeamSeasonFilter
  teamSeasonsAsParents_none: TeamSeasonFilter
  teamSeasonsAsPlayer_every: TeamSeasonFilter
  teamSeasonsAsPlayer_some: TeamSeasonFilter
  teamSeasonsAsPlayer_none: TeamSeasonFilter
}

type UserSubscriptionPayload {
  mutation: _ModelMutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserteamsAsFanTeam {
  name: String!
  tags: [String!]
  leagueId: ID
  league: TeamleagueLeague
  fansIds: [ID!]
  fans: [TeamfansUser!]
  teamSeasonsIds: [ID!]
  teamSeasons: [TeamteamSeasonsTeamSeason!]
}

input UserteamSeasonsAsCoachTeamSeason {
  name: String!
  tags: [String!]
  leagueSeasonId: ID
  leagueSeason: TeamSeasonleagueSeasonLeagueSeason
  teamId: ID
  team: TeamSeasonteamTeam
  coachesIds: [ID!]
  coaches: [TeamSeasoncoachesUser!]
  gameTeamSeasonsIds: [ID!]
  gameTeamSeasons: [TeamSeasongameTeamSeasonsGameTeamSeason!]
  parentsIds: [ID!]
  parents: [TeamSeasonparentsUser!]
  playersIds: [ID!]
  players: [TeamSeasonplayersUser!]
}

input UserteamSeasonsAsParentsTeamSeason {
  name: String!
  tags: [String!]
  leagueSeasonId: ID
  leagueSeason: TeamSeasonleagueSeasonLeagueSeason
  teamId: ID
  team: TeamSeasonteamTeam
  coachesIds: [ID!]
  coaches: [TeamSeasoncoachesUser!]
  gameTeamSeasonsIds: [ID!]
  gameTeamSeasons: [TeamSeasongameTeamSeasonsGameTeamSeason!]
  parentsIds: [ID!]
  parents: [TeamSeasonparentsUser!]
  playersIds: [ID!]
  players: [TeamSeasonplayersUser!]
}

input UserteamSeasonsAsPlayerTeamSeason {
  name: String!
  tags: [String!]
  leagueSeasonId: ID
  leagueSeason: TeamSeasonleagueSeasonLeagueSeason
  teamId: ID
  team: TeamSeasonteamTeam
  coachesIds: [ID!]
  coaches: [TeamSeasoncoachesUser!]
  gameTeamSeasonsIds: [ID!]
  gameTeamSeasons: [TeamSeasongameTeamSeasonsGameTeamSeason!]
  parentsIds: [ID!]
  parents: [TeamSeasonparentsUser!]
  playersIds: [ID!]
  players: [TeamSeasonplayersUser!]
}
